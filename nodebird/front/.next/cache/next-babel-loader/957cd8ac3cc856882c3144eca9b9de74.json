{"ast":null,"code":"import { all, fork, takeLatest, call, put, take } from 'redux-saga/effects';\nimport { LOG_IN, LOG_IN_SUCCESS, LOG_IN_FAILURE } from '../reducers/user';\nconst HELLO_SAGA = 'HELLO_SAGA';\n\nfunction loginAPI() {// 서버에 요청을 보내는 동작\n}\n\nfunction* login() {\n  // 제너레이터는 async await보다 할 수 있는것이 많다.\n  try {\n    // 로그인 함수가 동작하면 서버에 먼저 요청을 보내고\n    yield call(loginAPI);\n    yield put({\n      // 성공하면 이 부분 동작한다.\n      type: LOG_IN_SUCCESS\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeLatest(LOG_IN, login); // 로그인 액선이 들어오면 login함수를 실행\n}\n\nfunction* helloSaga() {\n  console.log('before saga');\n\n  while (true) {\n    yield take(HELLO_SAGA);\n  } // take가 HELLO_SAGA를 기다리겠다는 거임. next가 오면 실행하겠다는 거임.\n  // take함수 안에 next가 있음. 알아서 해줌. 언제 재게가 되냐면 HELLO_SAGA라는 action이 올 때까지\n  // 즉 HELLO_SAGA action이 들어오면 중단 품.\n  // 비동기 요청해도 되고, 타이머 넣어도 됨.\n\n\n  console.log('hello saga');\n}\n\nexport default function* userSaga() {\n  yield helloSaga(); // 시작점\n}","map":{"version":3,"sources":["C:/react-nodebird/ch1/front/saga/user.js"],"names":["all","fork","takeLatest","call","put","take","LOG_IN","LOG_IN_SUCCESS","LOG_IN_FAILURE","HELLO_SAGA","loginAPI","login","type","e","console","error","watchLogin","helloSaga","log","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,IAAhC,EAAsCC,GAAtC,EAA2CC,IAA3C,QAAuD,oBAAvD;AACA,SAASC,MAAT,EAAiBC,cAAjB,EAAiCC,cAAjC,QAAuD,kBAAvD;AAEA,MAAMC,UAAU,GAAG,YAAnB;;AACA,SAASC,QAAT,GAAoB,CAChB;AACH;;AAED,UAAUC,KAAV,GAAkB;AACd;AACA,MAAI;AACA;AACA,UAAMR,IAAI,CAACO,QAAD,CAAV;AACA,UAAMN,GAAG,CAAC;AACN;AACAQ,MAAAA,IAAI,EAAEL;AAFA,KAAD,CAAT;AAIH,GAPD,CAOE,OAAOM,CAAP,EAAU;AACR;AACAC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA,UAAMT,GAAG,CAAC;AACNQ,MAAAA,IAAI,EAAEJ;AADA,KAAD,CAAT;AAGH;AACJ;;AAED,UAAUQ,UAAV,GAAuB;AACnB,QAAMd,UAAU,CAACI,MAAD,EAASK,KAAT,CAAhB,CADmB,CACc;AACpC;;AAED,UAAUM,SAAV,GAAsB;AAClBH,EAAAA,OAAO,CAACI,GAAR,CAAY,aAAZ;;AACA,SAAO,IAAP,EAAa;AACT,UAAMb,IAAI,CAACI,UAAD,CAAV;AACH,GAJiB,CAIhB;AACF;AACA;AACA;;;AACAK,EAAAA,OAAO,CAACI,GAAR,CAAY,YAAZ;AACH;;AAED,eAAe,UAAUC,QAAV,GAAqB;AAChC,QAAMF,SAAS,EAAf,CADgC,CACb;AACtB","sourcesContent":["import { all, fork, takeLatest, call, put, take } from 'redux-saga/effects';\r\nimport { LOG_IN, LOG_IN_SUCCESS, LOG_IN_FAILURE } from '../reducers/user';\r\n\r\nconst HELLO_SAGA = 'HELLO_SAGA';\r\nfunction loginAPI() {\r\n    // 서버에 요청을 보내는 동작\r\n}\r\n\r\nfunction* login() {\r\n    // 제너레이터는 async await보다 할 수 있는것이 많다.\r\n    try {\r\n        // 로그인 함수가 동작하면 서버에 먼저 요청을 보내고\r\n        yield call(loginAPI);\r\n        yield put({\r\n            // 성공하면 이 부분 동작한다.\r\n            type: LOG_IN_SUCCESS,\r\n        });\r\n    } catch (e) {\r\n        // loginAPI 실패\r\n        console.error(e);\r\n        yield put({\r\n            type: LOG_IN_FAILURE,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLogin() {\r\n    yield takeLatest(LOG_IN, login); // 로그인 액선이 들어오면 login함수를 실행\r\n}\r\n\r\nfunction* helloSaga() {\r\n    console.log('before saga');\r\n    while (true) {\r\n        yield take(HELLO_SAGA);\r\n    } // take가 HELLO_SAGA를 기다리겠다는 거임. next가 오면 실행하겠다는 거임.\r\n    // take함수 안에 next가 있음. 알아서 해줌. 언제 재게가 되냐면 HELLO_SAGA라는 action이 올 때까지\r\n    // 즉 HELLO_SAGA action이 들어오면 중단 품.\r\n    // 비동기 요청해도 되고, 타이머 넣어도 됨.\r\n    console.log('hello saga');\r\n}\r\n\r\nexport default function* userSaga() {\r\n    yield helloSaga(); // 시작점\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nexport var initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: '제로초'\n    },\n    content: '첫 번째 게시글',\n    img: '',\n    Comments: []\n  } // 화면의 포스트 들\n  ],\n  imagePath: [],\n  // 미리보기 이미지 경로\n  addPostError: false,\n  // 포스트 업로드 실패 사유\n  isAddingPost: false,\n  // 포스트 업로드 중\n  postAdded: false,\n  // 포스트 업로드 성공\n  addCommentError: '',\n  isAddingComment: false,\n  commentAdded: false\n};\nvar dummyPost = {\n  id: 2,\n  User: {\n    id: 1,\n    nickname: '제로초'\n  },\n  content: '나는 더미 입니다.',\n  Comments: []\n};\n\nvar dummyComment = function dummyComment(data) {\n  return {\n    id: 1,\n    User: {\n      id: 1,\n      nickname: '제로초'\n    },\n    createdAt: new Date(),\n    content: '더미 댓글 입니다.'\n  };\n};\n\nexport var LOAD_MAIN_POSTS_REQUEST = 'LOAD_MAIN_POSTS_REQUEST';\nexport var LOAD_MAIN_POSTS_SUCCESS = 'LOAD_MAIN_POSTS_SUCCESS';\nexport var LOAD_MAIN_POSTS_FAILURE = 'LOAD_MAIN_POSTS_FAILURE';\nexport var LOAD_HASHTAG_POSTS_REQUEST = 'LOAD_HASHTAG_POSTS_REQUEST';\nexport var LOAD_HASHTAG_POSTS_SUCCESS = 'LOAD_HASHTAG_POSTS_SUCCESS';\nexport var LOAD_HASHTAG_POSTS_FAILURE = 'LOAD_HASHTAG_POSTS_FAILURE';\nexport var LOAD_IMAGES_POSTS_REQUEST = 'LOAD_IMAGES_POSTS_REQUEST';\nexport var LOAD_IMAGES_POSTS_SUCCESS = 'LOAD_IMAGES_POSTS_SUCCESS';\nexport var LOAD_IMAGES_POSTS_FAILURE = 'LOAD_IMAGES_POSTS_FAILURE';\nexport var ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport var ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport var ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport var REMOVE_IMAGE = 'REMOVE_IMAGE';\nexport var LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\nexport var LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\nexport var LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\nexport var UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\nexport var UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\nexport var UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\nexport var LOAD_COMMENTS_REQUEST = 'LOAD_COMMENTS_REQUEST';\nexport var LOAD_COMMENTS_SUCCESS = 'LOAD_COMMENTS_SUCCESS';\nexport var LOAD_COMMENTS_FAILURE = 'LOAD_COMMENTS_FAILURE';\nexport var RETWEET_REQUEST = 'RETWEET_REQUEST';\nexport var RETWEET_SUCCESS = 'RETWEET_SUCCESS';\nexport var RETWEET_FAILURE = 'RETWEET_FAILURE';\nexport var REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport var REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport var REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport var ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport var ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport var ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          isAddingPost: true\n        });\n      }\n\n    case ADD_POST_SUCCESS:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          isAddingPost: false,\n          postAdded: true,\n          mainPosts: [dummyPost].concat(_toConsumableArray(state.mainPosts)) // 더미 포스트가 기존 포스터 앞에 들어감\n\n        });\n      }\n\n    case ADD_POST_FAILURE:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          isAddingPost: false,\n          addPostError: action.error // 포스트 업로드 실패 사유\n\n        });\n      }\n\n    case ADD_COMMENT_REQUEST:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          isAddingComment: true\n        });\n      }\n\n    case ADD_COMMENT_SUCCESS:\n      {\n        var postIndex = state.mainPosts.findIndex(function (v) {\n          return v.id === action.data.postId;\n        }); // // 성공에 대한 action.data.postId로 게시글 위치를 찾음\n\n        var post = _objectSpread({}, state.mainPosts[postIndex]);\n\n        post.Comments = [dummyComment(action.data.content)].concat(_toConsumableArray(post.Comments)); // const post = state.mainPosts[postIndex]; // 찾은 위치로 게시글 선택\n        // const Comments = [...post.Comments, dummyComment];\n\n        var mainPosts = _toConsumableArray(state.mainPosts); // 모든 것은 불변성때문임.\n        // mainPosts[postIndex] = { ...post, Comments };\n\n\n        return _objectSpread(_objectSpread({}, state), {}, {\n          isAddingComment: false,\n          mainPosts: mainPosts,\n          commentAdded: true // dummyComment,\n\n        });\n      }\n\n    case ADD_COMMENT_FAILURE:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          commentAdded: false,\n          addCommentError: action.error\n        });\n      }\n\n    default:\n      {\n        return _objectSpread({}, state);\n      }\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/react-nodebird/ch1/front/reducers/post.js"],"names":["initialState","mainPosts","id","User","nickname","content","img","Comments","imagePath","addPostError","isAddingPost","postAdded","addCommentError","isAddingComment","commentAdded","dummyPost","dummyComment","data","createdAt","Date","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_SUCCESS","LOAD_MAIN_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_IMAGES_POSTS_REQUEST","LOAD_IMAGES_POSTS_SUCCESS","LOAD_IMAGES_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_IMAGE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","LOAD_COMMENTS_REQUEST","LOAD_COMMENTS_SUCCESS","LOAD_COMMENTS_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","reducer","state","action","type","error","postIndex","findIndex","v","postId","post"],"mappings":"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","sourcesContent":["export const initialState = {\r\n    mainPosts: [\r\n        {\r\n            id: 1,\r\n            User: {\r\n                id: 1,\r\n                nickname: '제로초',\r\n            },\r\n            content: '첫 번째 게시글',\r\n            img: '',\r\n            Comments: [],\r\n        }, // 화면의 포스트 들\r\n    ],\r\n    imagePath: [], // 미리보기 이미지 경로\r\n    addPostError: false, // 포스트 업로드 실패 사유\r\n    isAddingPost: false, // 포스트 업로드 중\r\n    postAdded: false, // 포스트 업로드 성공\r\n    addCommentError: '',\r\n    isAddingComment: false,\r\n    commentAdded: false,\r\n};\r\n\r\nconst dummyPost = {\r\n    id: 2,\r\n    User: {\r\n        id: 1,\r\n        nickname: '제로초',\r\n    },\r\n    content: '나는 더미 입니다.',\r\n    Comments: [],\r\n};\r\n\r\nconst dummyComment = (data) => ({\r\n    id: 1,\r\n    User: {\r\n        id: 1,\r\n        nickname: '제로초',\r\n    },\r\n    createdAt: new Date(),\r\n    content: '더미 댓글 입니다.',\r\n});\r\n\r\nexport const LOAD_MAIN_POSTS_REQUEST = 'LOAD_MAIN_POSTS_REQUEST';\r\nexport const LOAD_MAIN_POSTS_SUCCESS = 'LOAD_MAIN_POSTS_SUCCESS';\r\nexport const LOAD_MAIN_POSTS_FAILURE = 'LOAD_MAIN_POSTS_FAILURE';\r\n\r\nexport const LOAD_HASHTAG_POSTS_REQUEST = 'LOAD_HASHTAG_POSTS_REQUEST';\r\nexport const LOAD_HASHTAG_POSTS_SUCCESS = 'LOAD_HASHTAG_POSTS_SUCCESS';\r\nexport const LOAD_HASHTAG_POSTS_FAILURE = 'LOAD_HASHTAG_POSTS_FAILURE';\r\n\r\nexport const LOAD_IMAGES_POSTS_REQUEST = 'LOAD_IMAGES_POSTS_REQUEST';\r\nexport const LOAD_IMAGES_POSTS_SUCCESS = 'LOAD_IMAGES_POSTS_SUCCESS';\r\nexport const LOAD_IMAGES_POSTS_FAILURE = 'LOAD_IMAGES_POSTS_FAILURE';\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE';\r\n\r\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\r\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\r\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\r\n\r\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\r\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\r\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\r\n\r\nexport const LOAD_COMMENTS_REQUEST = 'LOAD_COMMENTS_REQUEST';\r\nexport const LOAD_COMMENTS_SUCCESS = 'LOAD_COMMENTS_SUCCESS';\r\nexport const LOAD_COMMENTS_FAILURE = 'LOAD_COMMENTS_FAILURE';\r\n\r\nexport const RETWEET_REQUEST = 'RETWEET_REQUEST';\r\nexport const RETWEET_SUCCESS = 'RETWEET_SUCCESS';\r\nexport const RETWEET_FAILURE = 'RETWEET_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ADD_POST_REQUEST: {\r\n            return {\r\n                ...state,\r\n                isAddingPost: true,\r\n            };\r\n        }\r\n        case ADD_POST_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                isAddingPost: false,\r\n                postAdded: true,\r\n                mainPosts: [dummyPost, ...state.mainPosts], // 더미 포스트가 기존 포스터 앞에 들어감\r\n            };\r\n        }\r\n        case ADD_POST_FAILURE: {\r\n            return {\r\n                ...state,\r\n                isAddingPost: false,\r\n                addPostError: action.error, // 포스트 업로드 실패 사유\r\n            };\r\n        }\r\n        case ADD_COMMENT_REQUEST: {\r\n            return {\r\n                ...state,\r\n                isAddingComment: true,\r\n            };\r\n        }\r\n        case ADD_COMMENT_SUCCESS: {\r\n            const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\r\n            // // 성공에 대한 action.data.postId로 게시글 위치를 찾음\r\n            const post = { ...state.mainPosts[postIndex] };\r\n            post.Comments = [dummyComment(action.data.content), ...post.Comments];\r\n\r\n            // const post = state.mainPosts[postIndex]; // 찾은 위치로 게시글 선택\r\n            // const Comments = [...post.Comments, dummyComment];\r\n            const mainPosts = [...state.mainPosts]; // 모든 것은 불변성때문임.\r\n            // mainPosts[postIndex] = { ...post, Comments };\r\n            return {\r\n                ...state,\r\n                isAddingComment: false,\r\n                mainPosts,\r\n                commentAdded: true,\r\n                // dummyComment,\r\n            };\r\n        }\r\n        case ADD_COMMENT_FAILURE: {\r\n            return {\r\n                ...state,\r\n                commentAdded: false,\r\n                addCommentError: action.error,\r\n            };\r\n        }\r\n        default: {\r\n            return {\r\n                ...state,\r\n            };\r\n        }\r\n    }\r\n};\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}
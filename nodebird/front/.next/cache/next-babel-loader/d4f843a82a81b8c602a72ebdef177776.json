{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport const initialState = {\n  // 초기 값 , 리액트의 state라 보면 됨\n  isLoggedIn: false,\n  user: {}\n};\nexport const LOG_IN = 'LOG_IN'; // 액션의 이름\n\nexport const LOG_OUT = 'LOG_OUT'; // 아래는 set State라 보면됨. Action과 reducer로 분리됨.\n\nexport const loginAction = {\n  type: LOG_IN,\n  data: {\n    nickname: '제로초'\n  }\n};\nexport const logoutAction = {\n  type: LOG_OUT\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case LOG_IN:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          // 다음 state들 할 행동\n          isLoggedIn: true,\n          user: action.data\n        });\n      }\n\n    case LOG_OUT:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          // 스프레드 문법: 새로운 객체나 배열을 생성하는 문법 매번 다 쓰고 있음\n          isLoggedIn: false,\n          user: null\n        });\n      }\n\n    default:\n      {\n        return _objectSpread({}, state);\n      }\n  }\n};\n\nexport default reducer; // setState((prevState)=>{ 옛날 스테이트와 같아졌는지 확인하기 때문에 새로 생성 해줘야함.\n//     return {\n//         field: { ...prevState.field},\n//     }\n// })","map":{"version":3,"sources":["C:/react-nodebird/ch1/front/reducers/user.js"],"names":["initialState","isLoggedIn","user","LOG_IN","LOG_OUT","loginAction","type","data","nickname","logoutAction","reducer","state","action"],"mappings":";;;;;;AAAA,OAAO,MAAMA,YAAY,GAAG;AACxB;AACAC,EAAAA,UAAU,EAAE,KAFY;AAGxBC,EAAAA,IAAI,EAAE;AAHkB,CAArB;AAMP,OAAO,MAAMC,MAAM,GAAG,QAAf,C,CAAyB;;AAChC,OAAO,MAAMC,OAAO,GAAG,SAAhB,C,CAEP;;AACA,OAAO,MAAMC,WAAW,GAAG;AACvBC,EAAAA,IAAI,EAAEH,MADiB;AAEvBI,EAAAA,IAAI,EAAE;AACFC,IAAAA,QAAQ,EAAE;AADR;AAFiB,CAApB;AAOP,OAAO,MAAMC,YAAY,GAAG;AACxBH,EAAAA,IAAI,EAAEF;AADkB,CAArB;;AAIP,MAAMM,OAAO,GAAG,CAACC,KAAK,GAAGX,YAAT,EAAuBY,MAAvB,KAAkC;AAC9C,UAAQA,MAAM,CAACN,IAAf;AACI,SAAKH,MAAL;AAAa;AACT,+CACOQ,KADP;AACc;AACVV,UAAAA,UAAU,EAAE,IAFhB;AAGIC,UAAAA,IAAI,EAAEU,MAAM,CAACL;AAHjB;AAKH;;AACD,SAAKH,OAAL;AAAc;AACV,+CACOO,KADP;AACc;AACVV,UAAAA,UAAU,EAAE,KAFhB;AAGIC,UAAAA,IAAI,EAAE;AAHV;AAKH;;AACD;AAAS;AACL,iCACOS,KADP;AAGH;AAnBL;AAqBH,CAtBD;;AAwBA,eAAeD,OAAf,C,CACA;AACA;AACA;AACA;AACA","sourcesContent":["export const initialState = {\r\n    // 초기 값 , 리액트의 state라 보면 됨\r\n    isLoggedIn: false,\r\n    user: {},\r\n};\r\n\r\nexport const LOG_IN = 'LOG_IN'; // 액션의 이름\r\nexport const LOG_OUT = 'LOG_OUT';\r\n\r\n// 아래는 set State라 보면됨. Action과 reducer로 분리됨.\r\nexport const loginAction = {\r\n    type: LOG_IN,\r\n    data: {\r\n        nickname: '제로초',\r\n    },\r\n};\r\n\r\nexport const logoutAction = {\r\n    type: LOG_OUT,\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case LOG_IN: {\r\n            return {\r\n                ...state, // 다음 state들 할 행동\r\n                isLoggedIn: true,\r\n                user: action.data,\r\n            };\r\n        }\r\n        case LOG_OUT: {\r\n            return {\r\n                ...state, // 스프레드 문법: 새로운 객체나 배열을 생성하는 문법 매번 다 쓰고 있음\r\n                isLoggedIn: false,\r\n                user: null,\r\n            };\r\n        }\r\n        default: {\r\n            return {\r\n                ...state,\r\n            };\r\n        }\r\n    }\r\n};\r\n\r\nexport default reducer;\r\n// setState((prevState)=>{ 옛날 스테이트와 같아졌는지 확인하기 때문에 새로 생성 해줘야함.\r\n//     return {\r\n//         field: { ...prevState.field},\r\n//     }\r\n// })\r\n"]},"metadata":{},"sourceType":"module"}
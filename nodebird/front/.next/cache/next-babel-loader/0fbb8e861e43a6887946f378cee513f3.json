{"ast":null,"code":"var _jsxFileName = \"C:\\\\react-nodebird\\\\ch1\\\\front\\\\components\\\\PostCard.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect } from 'react';\nimport { Button, Card, Avatar, Popover, Input, Form, List, Comment } from 'antd';\nimport { RetweetOutlined, HeartTwoTone, HeartOutlined, MessageOutlined, EllipsisOutlined } from '@ant-design/icons';\nimport PropTypes from 'prop-types';\nimport LINK from 'next/link';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ADD_COMMENT_REQUEST } from '../reducers/post';\n\nconst PostCard = ({\n  post\n}) => {\n  const {\n    0: commentFormOpened,\n    1: setCommentFormOpened\n  } = useState(false);\n  const {\n    0: commentText,\n    1: setCommentText\n  } = useState('');\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    isAddingComment,\n    commentAdded\n  } = useSelector(state => state.post);\n  const dispatch = useDispatch();\n  const onToggleComment = useCallback(() => {\n    setCommentFormOpened(prev => !prev);\n  });\n  console.log(post.id);\n  console.log('포스ㅍ트', post);\n  const onSubmitComment = useCallback(e => {\n    e.preventDefault;\n\n    if (!me) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        postId: post.id\n      }\n    }); // useCallback에서 state를 넣어주면 상속에 넣어줘야함\n  }, [me && me.id]); // 객체의 값을 넣우주도록 비교때메 에러나기가 쉬움.\n  // 처음의 me를 기억해 null상태를 기억함.\n\n  useEffect(() => {\n    setCommentText('');\n  }, [commentAdded == true]);\n  const onChangeCommentText = useCallback(e => {\n    e.preventDefault;\n    setCommentText(e.target.value);\n  }, []);\n  return __jsx(React.Fragment, null, __jsx(Card, {\n    key: +post.createdAt,\n    cover: post.img && __jsx(\"img\", {\n      alt: \"example\",\n      src: post.img,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 36\n      }\n    }),\n    actions: [__jsx(RetweetOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 21\n      }\n    }), __jsx(HeartTwoTone, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 21\n      }\n    }), __jsx(MessageOutlined, {\n      onClick: onToggleComment,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 21\n      }\n    }), __jsx(Popover, {\n      key: \"ellipsis\",\n      content: __jsx(Button.Group, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 29\n        }\n      }, __jsx(Button, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 33\n        }\n      }, \"\\uC2E0\\uACE0\"), __jsx(Button, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 33\n        }\n      }, \"\\uC218\\uC815\"), __jsx(Button, {\n        danger: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 33\n        }\n      }, \"\\uC0AD\\uC81C\")),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 21\n      }\n    }, __jsx(EllipsisOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 25\n      }\n    }))],\n    extra: __jsx(Button, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 24\n      }\n    }, \"\\uD314\\uB85C\\uC6B0\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Avatar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 29\n      }\n    }, post.User.nickname[0]),\n    title: post.User.nickname,\n    description: __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 25\n      }\n    }, post.content.split(/(#[^\\s]+)/g).map(v => {\n      if (v.match(/#[^\\s]+/)) {\n        // 진짜 해쉬테그는 링크로\n        return __jsx(LINK, {\n          href: \"/hashtag\",\n          key: v,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 41\n          }\n        }, __jsx(\"a\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 45\n          }\n        }, v));\n      }\n    })) // a tag -> LINK로 써야함.\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 17\n    }\n  })), commentFormOpened && __jsx(React.Fragment, null, __jsx(Form, {\n    onFinish: onSubmitComment,\n    style: {\n      paddingTop: '10px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 21\n    }\n  }, __jsx(Form.Item, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 25\n    }\n  }, __jsx(Input.TextArea, {\n    rows: 4,\n    value: commentText,\n    onChange: onChangeCommentText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 29\n    }\n  })), __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: isAddingComment,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 25\n    }\n  }, \"\\uC090\\uC57D\")), __jsx(List, {\n    header: `${post.Comments ? post.Comments.length : 0} 댓글`,\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments || [],\n    renderItem: item => __jsx(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 29\n      }\n    }, __jsx(Comment, {\n      author: item.User.nickname,\n      avatar: __jsx(Avatar, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 45\n        }\n      }, item.User.nickname),\n      content: item.content,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 33\n      }\n    })) // 해쉬테그 링크 넣기는 따라는 쉬워도 어렵다.\n    // 따라 하는것으론 실력 안 는다. 응용해서 새로운것을 추가적으로 만드는 노력이 필요.\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 21\n    }\n  })));\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    User: PropTypes.object,\n    content: PropTypes.string,\n    img: PropTypes.string,\n    createdAt: PropTypes.object\n  })\n};\nexport default PostCard;","map":{"version":3,"sources":["C:/react-nodebird/ch1/front/components/PostCard.js"],"names":["React","useState","useCallback","useEffect","Button","Card","Avatar","Popover","Input","Form","List","Comment","RetweetOutlined","HeartTwoTone","HeartOutlined","MessageOutlined","EllipsisOutlined","PropTypes","LINK","useSelector","useDispatch","ADD_COMMENT_REQUEST","PostCard","post","commentFormOpened","setCommentFormOpened","commentText","setCommentText","me","state","user","isAddingComment","commentAdded","dispatch","onToggleComment","prev","console","log","id","onSubmitComment","e","preventDefault","alert","type","data","postId","onChangeCommentText","target","value","createdAt","img","User","nickname","content","split","map","v","match","paddingTop","Comments","length","item","propTypes","shape","object","string"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react';\r\nimport { Button, Card, Avatar, Popover, Input, Form, List, Comment } from 'antd';\r\nimport { RetweetOutlined, HeartTwoTone, HeartOutlined, MessageOutlined, EllipsisOutlined } from '@ant-design/icons';\r\nimport PropTypes from 'prop-types';\r\nimport LINK from 'next/link';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { ADD_COMMENT_REQUEST } from '../reducers/post';\r\n\r\nconst PostCard = ({ post }) => {\r\n    const [commentFormOpened, setCommentFormOpened] = useState(false);\r\n    const [commentText, setCommentText] = useState('');\r\n    const { me } = useSelector((state) => state.user);\r\n    const { isAddingComment, commentAdded } = useSelector((state) => state.post);\r\n    const dispatch = useDispatch();\r\n\r\n    const onToggleComment = useCallback(() => {\r\n        setCommentFormOpened((prev) => !prev);\r\n    });\r\n    console.log(post.id);\r\n    console.log('포스ㅍ트', post);\r\n    const onSubmitComment = useCallback(\r\n        (e) => {\r\n            e.preventDefault;\r\n            if (!me) {\r\n                return alert('로그인이 필요합니다.');\r\n            }\r\n\r\n            dispatch({\r\n                type: ADD_COMMENT_REQUEST,\r\n                data: {\r\n                    postId: post.id,\r\n                },\r\n            });\r\n            // useCallback에서 state를 넣어주면 상속에 넣어줘야함\r\n        },\r\n        [me && me.id]\r\n    ); // 객체의 값을 넣우주도록 비교때메 에러나기가 쉬움.\r\n    // 처음의 me를 기억해 null상태를 기억함.\r\n\r\n    useEffect(() => {\r\n        setCommentText('');\r\n    }, [commentAdded == true]);\r\n\r\n    const onChangeCommentText = useCallback((e) => {\r\n        e.preventDefault;\r\n        setCommentText(e.target.value);\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <Card\r\n                key={+post.createdAt}\r\n                cover={post.img && <img alt=\"example\" src={post.img} />}\r\n                actions={[\r\n                    <RetweetOutlined />,\r\n                    <HeartTwoTone />,\r\n                    <MessageOutlined onClick={onToggleComment} />,\r\n                    <Popover\r\n                        key=\"ellipsis\"\r\n                        content={\r\n                            <Button.Group>\r\n                                <Button>신고</Button>\r\n                                <Button>수정</Button>\r\n                                <Button danger>삭제</Button>\r\n                            </Button.Group>\r\n                        }\r\n                    >\r\n                        <EllipsisOutlined />\r\n                    </Popover>,\r\n                ]}\r\n                extra={<Button>팔로우</Button>}\r\n            >\r\n                <Card.Meta\r\n                    avatar={<Avatar>{post.User.nickname[0]}</Avatar>}\r\n                    title={post.User.nickname}\r\n                    description={\r\n                        <div>\r\n                            {post.content.split(/(#[^\\s]+)/g).map((v) => {\r\n                                if (v.match(/#[^\\s]+/)) {\r\n                                    // 진짜 해쉬테그는 링크로\r\n                                    return (\r\n                                        <LINK href=\"/hashtag\" key={v}>\r\n                                            <a>{v}</a>\r\n                                        </LINK>\r\n                                    );\r\n                                }\r\n                            })}\r\n                        </div>\r\n                    } // a tag -> LINK로 써야함.\r\n                ></Card.Meta>\r\n            </Card>\r\n            {commentFormOpened && (\r\n                <>\r\n                    <Form onFinish={onSubmitComment} style={{ paddingTop: '10px' }}>\r\n                        <Form.Item>\r\n                            <Input.TextArea rows={4} value={commentText} onChange={onChangeCommentText} />\r\n                        </Form.Item>\r\n                        <Button type=\"primary\" htmlType=\"submit\" loading={isAddingComment}>\r\n                            삐약\r\n                        </Button>\r\n                    </Form>\r\n                    <List\r\n                        header={`${post.Comments ? post.Comments.length : 0} 댓글`}\r\n                        itemLayout=\"horizontal\"\r\n                        dataSource={post.Comments || []}\r\n                        renderItem={(item) => (\r\n                            <li>\r\n                                <Comment\r\n                                    author={item.User.nickname}\r\n                                    avatar={<Avatar>{item.User.nickname}</Avatar>}\r\n                                    content={item.content}\r\n                                />\r\n                            </li>\r\n                        )} // 해쉬테그 링크 넣기는 따라는 쉬워도 어렵다.\r\n                        // 따라 하는것으론 실력 안 는다. 응용해서 새로운것을 추가적으로 만드는 노력이 필요.\r\n                    />\r\n                </>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nPostCard.propTypes = {\r\n    post: PropTypes.shape({\r\n        User: PropTypes.object,\r\n        content: PropTypes.string,\r\n        img: PropTypes.string,\r\n        createdAt: PropTypes.object,\r\n    }),\r\n};\r\nexport default PostCard;\r\n"]},"metadata":{},"sourceType":"module"}
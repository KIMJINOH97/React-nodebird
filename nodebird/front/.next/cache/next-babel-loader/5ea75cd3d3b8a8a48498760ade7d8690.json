{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(login),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogin),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watchHello),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(signUp),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(watchSignUp),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(userSaga);\n\nimport { all, fork, takeLatest, takeEvery, call, put, take, delay } from 'redux-saga/effects';\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE } from '../reducers/user';\nimport axios from 'axios';\n\nfunction loginAPI() {\n  // 서버에 요청을 보내는 동작\n  return axios.post('http://localhost:3065/api/post/login');\n}\n\nfunction login() {\n  return _regeneratorRuntime.wrap(function login$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            // 성공하면 이 부분 동작한다.\n            type: LOG_IN_SUCCESS\n          });\n\n        case 5:\n          _context.next = 13;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          // loginAPI 실패\n          console.log('adsfj');\n          console.error(_context.t0);\n          _context.next = 13;\n          return put({\n            type: LOG_IN_FAILURE\n          });\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction watchLogin() {\n  return _regeneratorRuntime.wrap(function watchLogin$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeEvery(LOG_IN_REQUEST, login);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n} // while(true) = takeEvery와 비슷하게 작용.\n// takeLatest 와 takeEvery는 동작은 비슷함. 이전 요청 중 끝나지 않은게 있다면 이전 요청 취소해줌.\n// 그러나 delay가 들어가면 다름. HELLOSAGA 3번하면 1번만 뜸. 가장 최신의 것만 받았다 친다?임. 동시에 여러번 하면 그 중 마지막만 받는다.\n\n\nfunction watchHello() {\n  return _regeneratorRuntime.wrap(function watchHello$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(HELLO_SAGA, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n            return _regeneratorRuntime.wrap(function _callee$(_context3) {\n              while (1) {\n                switch (_context3.prev = _context3.next) {\n                  case 0:\n                    _context3.next = 2;\n                    return delay(1000);\n\n                  case 2:\n                    _context3.next = 4;\n                    return put({\n                      type: 'BYE_SAGA'\n                    });\n\n                  case 4:\n                  case \"end\":\n                    return _context3.stop();\n                }\n              }\n            }, _callee);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction signUpAPI(signUpdata) {\n  // 서버요청\n  return axios.post('http://localhost:3065/api/user/', signUpdata);\n}\n\nfunction signUp(action) {\n  return _regeneratorRuntime.wrap(function signUp$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return call(signUpAPI, action.data);\n\n        case 3:\n          _context5.next = 5;\n          return put({\n            type: SIGN_UP_SUCCESS\n          });\n\n        case 5:\n          _context5.next = 12;\n          break;\n\n        case 7:\n          _context5.prev = 7;\n          _context5.t0 = _context5[\"catch\"](0);\n          console.error(_context5.t0);\n          _context5.next = 12;\n          return put({\n            type: SIGN_UP_FAILURE,\n            error: _context5.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked4, null, [[0, 7]]);\n}\n\nfunction watchSignUp() {\n  return _regeneratorRuntime.wrap(function watchSignUp$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeEvery(SIGN_UP_REQUEST, signUp);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked5);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return all([fork(watchLogin), fork(watchSignUp)]);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked6);\n} // function* watchLogin() {\n//     console.log('before log_in');\n//     while (true) {\n//         yield take(LOG_IN); // take(LOG_IN, login)로그인 액선이 들어오면 login함수를 실행\n//         yield delay(2000); // 2초뒤에 success가 실행\n//         yield put({\n//             type: LOG_IN_SUCCESS, // saga의 dispatch와 같다보면됨.\n//         });\n//         console.log('sdjf');\n//     }\n// }\n// function* watchHello() {\n//     console.log('before saga');\n//     while (true) {\n//         yield take(HELLO_SAGA);\n//         console.log('hello saga');\n//         console.log('hello saga');\n//         console.log('hello saga');\n//         // 리덕스의 동작을 방해하진 않는다.\n//     } // take가 HELLO_SAGA를 기다리겠다는 거임. next가 오면 실행하겠다는 거임.\n//     // take함수 안에 next가 있음. 알아서 해줌. 언제 재게가 되냐면 HELLO_SAGA라는 action이 올 때까지\n//     // 즉 HELLO_SAGA action이 들어오면 중단 품.\n//     // 비동기 요청해도 되고, 타이머 넣어도 됨.\n// }","map":{"version":3,"sources":["C:/react-nodebird/ch1/front/saga/user.js"],"names":["login","watchLogin","watchHello","signUp","watchSignUp","userSaga","all","fork","takeLatest","takeEvery","call","put","take","delay","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","axios","loginAPI","post","type","console","log","error","HELLO_SAGA","signUpAPI","signUpdata","action","data"],"mappings":"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","sourcesContent":["import { all, fork, takeLatest, takeEvery, call, put, take, delay } from 'redux-saga/effects';\r\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE } from '../reducers/user';\r\nimport axios from 'axios';\r\n\r\nfunction loginAPI() {\r\n    // 서버에 요청을 보내는 동작\r\n    return axios.post('http://localhost:3065/api/post/login');\r\n}\r\n\r\nfunction* login() {\r\n    // 제너레이터는 async await보다 할 수 있는것이 많다.\r\n    // try, catch 는 실패할 수 있는 코드에서 보호하기 위해 사용.\r\n    try {\r\n        // 로그인 함수가 동작하면 서버에 먼저 요청을 보내고\r\n        // yield fork(logger); // logger는 내 기록을 로깅하는 함수, 10초걸림.\r\n        // 만약 call로 하면 10초 기다렸다가 밑의 함수 실행. 이런 경우는 fork씀.\r\n        // yield call(loginAPI); // fork를 하면 서버 요청을 보내고 신경 안쓴 뒤 put을 한다.\r\n        // fork는 문제가 생긴다. call일 때는 loginAPI가 오류나면 error로 넘어가 오류처리.\r\n        yield delay(1000);\r\n        yield put({\r\n            // 성공하면 이 부분 동작한다.\r\n            type: LOG_IN_SUCCESS,\r\n        });\r\n    } catch (e) {\r\n        // loginAPI 실패\r\n        console.log('adsfj');\r\n        console.error(e);\r\n        yield put({\r\n            type: LOG_IN_FAILURE,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLogin() {\r\n    yield takeEvery(LOG_IN_REQUEST, login);\r\n}\r\n\r\n// while(true) = takeEvery와 비슷하게 작용.\r\n// takeLatest 와 takeEvery는 동작은 비슷함. 이전 요청 중 끝나지 않은게 있다면 이전 요청 취소해줌.\r\n// 그러나 delay가 들어가면 다름. HELLOSAGA 3번하면 1번만 뜸. 가장 최신의 것만 받았다 친다?임. 동시에 여러번 하면 그 중 마지막만 받는다.\r\nfunction* watchHello() {\r\n    yield takeLatest(HELLO_SAGA, function* () {\r\n        yield delay(1000);\r\n        yield put({\r\n            type: 'BYE_SAGA',\r\n        });\r\n    });\r\n}\r\n\r\nfunction signUpAPI(signUpdata) {\r\n    // 서버요청\r\n    return axios.post('http://localhost:3065/api/user/', signUpdata);\r\n}\r\n\r\nfunction* signUp(action) {\r\n    // action에 id password nick이 들어있음\r\n    try {\r\n        yield call(signUpAPI, action.data); // 서버요청 보냄, 두번째는 인자signUpAPI의 인자로 전달.\r\n        //yield delay(2000);\r\n        //throw new Error('에러임');\r\n        yield put({\r\n            type: SIGN_UP_SUCCESS,\r\n        });\r\n    } catch (e) {\r\n        console.error(e);\r\n        yield put({\r\n            type: SIGN_UP_FAILURE,\r\n            error: e,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchSignUp() {\r\n    yield takeEvery(SIGN_UP_REQUEST, signUp);\r\n}\r\n\r\nexport default function* userSaga() {\r\n    yield all([fork(watchLogin), fork(watchSignUp)]); // 시작점\r\n    // all은 여러 이펙트를 동시에 실행 할 수 있게끔함.\r\n    // fork, call 비슷함. 공통점: 기본적으로 함수를 실행함\r\n    // call은 동기호출, fork는 비동기 호출임. fork는 비동기라 동시 실행 가능.\r\n}\r\n\r\n// function* watchLogin() {\r\n//     console.log('before log_in');\r\n//     while (true) {\r\n//         yield take(LOG_IN); // take(LOG_IN, login)로그인 액선이 들어오면 login함수를 실행\r\n//         yield delay(2000); // 2초뒤에 success가 실행\r\n//         yield put({\r\n//             type: LOG_IN_SUCCESS, // saga의 dispatch와 같다보면됨.\r\n//         });\r\n//         console.log('sdjf');\r\n//     }\r\n// }\r\n\r\n// function* watchHello() {\r\n//     console.log('before saga');\r\n//     while (true) {\r\n//         yield take(HELLO_SAGA);\r\n//         console.log('hello saga');\r\n//         console.log('hello saga');\r\n//         console.log('hello saga');\r\n//         // 리덕스의 동작을 방해하진 않는다.\r\n//     } // take가 HELLO_SAGA를 기다리겠다는 거임. next가 오면 실행하겠다는 거임.\r\n//     // take함수 안에 next가 있음. 알아서 해줌. 언제 재게가 되냐면 HELLO_SAGA라는 action이 올 때까지\r\n//     // 즉 HELLO_SAGA action이 들어오면 중단 품.\r\n//     // 비동기 요청해도 되고, 타이머 넣어도 됨.\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}
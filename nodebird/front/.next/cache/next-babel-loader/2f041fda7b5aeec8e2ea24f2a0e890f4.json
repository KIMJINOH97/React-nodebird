{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar dummyUser = {\n  nickname: '제로초',\n  Post: [],\n  Followings: [],\n  Followers: [],\n  siginUpData: []\n}; // 리덕스는 동기화로 작용함. 비동기로 하기 위해선 사가라는 미들웨어를 넣어야함.\n// 원래는 서버 쪽에 data가 전달되고, 서버가 로그인 성공이라는 응답을 보내주고, 그걸 다시 받아 로그인 함.\n// 서버가 맞는 응답을 보내주는 과정이 필요함. 그래서 필요한 것이 미들웨어.\n\nexport var initialState = {\n  // 초기 값 , 리액트의 state라 보면 됨\n  isLoggedIn: false,\n  user: {\n    nickname: null\n  },\n  siginUpData: {\n    id: '',\n    nick: '',\n    password: ''\n  }\n}; // 로그인 동작할 때,\n// 서버에 요청을 보낸다 -> request -> 비동기로 LOG_IN_SUCCESS or LOG_IN_FAILURE 선택> LOG_IN 동작\n\nexport var LOG_IN = 'LOG_IN'; // 액션의 이름\n\nexport var LOG_IN_SUCCESS = 'LOG_SUCCESS'; // 액션의 이름\n\nexport var LOG_IN_FAILURE = 'LOG_FAILURE'; // 액션의 이름\n\nexport var LOG_OUT = 'LOG_OUT';\nexport var SIGN_UP = 'SIGN_UP';\nexport var SIGN_UP_SUCCESS = 'SIGN_UP_SUCCESS'; // export const SIGN_UP_ID = 'SIGN_UP_ID';\n// export const SIGN_UP_NICK = 'SIGN_UP_NICK';\n// export const SIGN_UP_PASSWORD = 'SIGN_UP_PASSWORD';\n// 원래는 이렇게 해줘야함.\n// 아래는 set State라 보면됨. Action과 reducer로 분리됨.\n\nexport var signUpSuccess = {\n  type: SIGN_UP_SUCCESS\n};\nexport var signUpAction = function signUpAction(data) {\n  // 동적 데이터는 함수?\n  return {\n    type: SIGN_UP,\n    data: data\n  };\n};\nexport var loginAction = {\n  type: LOG_IN\n};\nexport var logoutAction = {\n  type: LOG_OUT\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case LOG_IN_SUCCESS:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          // 다음 state들 할 행동\n          isLoggedIn: true,\n          user: dummyUser,\n          loginData: action.data\n        });\n      }\n\n    case LOG_OUT:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          // 스프레드 문법: 새로운 객체나 배열을 생성하는 문법 매번 다 쓰고 있음\n          isLoggedIn: false,\n          user: null\n        });\n      }\n\n    case LOG_IN_FAILURE:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case SIGN_UP:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          signUpData: action.data\n        });\n      }\n\n    default:\n      {\n        return _objectSpread({}, state);\n      }\n  }\n};\n\nexport default reducer; // setState((prevState)=>{ 옛날 스테이트와 같아졌는지 확인하기 때문에 새로 생성 해줘야함.\n//     return {\n//         field: { ...prevState.field},\n//     }\n// })\n// function* generator() {\n//     // 제너레이터 라고 *는 무한의 개념 제너레이터는 함수 실행을 중간에 멈출 수 있고 원할 때 재개 가능\n// }","map":{"version":3,"sources":["C:/react-nodebird/ch1/front/reducers/user.js"],"names":["dummyUser","nickname","Post","Followings","Followers","siginUpData","initialState","isLoggedIn","user","id","nick","password","LOG_IN","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT","SIGN_UP","SIGN_UP_SUCCESS","signUpSuccess","type","signUpAction","data","loginAction","logoutAction","reducer","state","action","loginData","signUpData"],"mappings":";;;;;;AAAA,IAAMA,SAAS,GAAG;AACdC,EAAAA,QAAQ,EAAE,KADI;AAEdC,EAAAA,IAAI,EAAE,EAFQ;AAGdC,EAAAA,UAAU,EAAE,EAHE;AAIdC,EAAAA,SAAS,EAAE,EAJG;AAKdC,EAAAA,WAAW,EAAE;AALC,CAAlB,C,CAQA;AACA;AACA;;AAEA,OAAO,IAAMC,YAAY,GAAG;AACxB;AACAC,EAAAA,UAAU,EAAE,KAFY;AAGxBC,EAAAA,IAAI,EAAE;AACFP,IAAAA,QAAQ,EAAE;AADR,GAHkB;AAMxBI,EAAAA,WAAW,EAAE;AACTI,IAAAA,EAAE,EAAE,EADK;AAETC,IAAAA,IAAI,EAAE,EAFG;AAGTC,IAAAA,QAAQ,EAAE;AAHD;AANW,CAArB,C,CAaP;AACA;;AACA,OAAO,IAAMC,MAAM,GAAG,QAAf,C,CAAyB;;AAChC,OAAO,IAAMC,cAAc,GAAG,aAAvB,C,CAAsC;;AAC7C,OAAO,IAAMC,cAAc,GAAG,aAAvB,C,CAAsC;;AAC7C,OAAO,IAAMC,OAAO,GAAG,SAAhB;AACP,OAAO,IAAMC,OAAO,GAAG,SAAhB;AACP,OAAO,IAAMC,eAAe,GAAG,iBAAxB,C,CACP;AACA;AACA;AACA;AAEA;;AACA,OAAO,IAAMC,aAAa,GAAG;AACzBC,EAAAA,IAAI,EAAEF;AADmB,CAAtB;AAIP,OAAO,IAAMG,YAAY,GAAG,SAAfA,YAAe,CAACC,IAAD,EAAU;AAClC;AACA,SAAO;AACHF,IAAAA,IAAI,EAAEH,OADH;AAEHK,IAAAA,IAAI,EAAEA;AAFH,GAAP;AAIH,CANM;AAQP,OAAO,IAAMC,WAAW,GAAG;AACvBH,EAAAA,IAAI,EAAEP;AADiB,CAApB;AAIP,OAAO,IAAMW,YAAY,GAAG;AACxBJ,EAAAA,IAAI,EAAEJ;AADkB,CAArB;;AAIP,IAAMS,OAAO,GAAG,SAAVA,OAAU,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBnB,YAAyB;AAAA,MAAXoB,MAAW;;AAC9C,UAAQA,MAAM,CAACP,IAAf;AACI,SAAKN,cAAL;AAAqB;AACjB,+CACOY,KADP;AACc;AACVlB,UAAAA,UAAU,EAAE,IAFhB;AAGIC,UAAAA,IAAI,EAAER,SAHV;AAII2B,UAAAA,SAAS,EAAED,MAAM,CAACL;AAJtB;AAMH;;AACD,SAAKN,OAAL;AAAc;AACV,+CACOU,KADP;AACc;AACVlB,UAAAA,UAAU,EAAE,KAFhB;AAGIC,UAAAA,IAAI,EAAE;AAHV;AAKH;;AACD,SAAKM,cAAL;AAAqB;AACjB,iCACOW,KADP;AAGH;;AACD,SAAKT,OAAL;AAAc;AACV,+CACOS,KADP;AAEIG,UAAAA,UAAU,EAAEF,MAAM,CAACL;AAFvB;AAIH;;AACD;AAAS;AACL,iCACOI,KADP;AAGH;AA/BL;AAiCH,CAlCD;;AAoCA,eAAeD,OAAf,C,CACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA","sourcesContent":["const dummyUser = {\r\n    nickname: '제로초',\r\n    Post: [],\r\n    Followings: [],\r\n    Followers: [],\r\n    siginUpData: [],\r\n};\r\n\r\n// 리덕스는 동기화로 작용함. 비동기로 하기 위해선 사가라는 미들웨어를 넣어야함.\r\n// 원래는 서버 쪽에 data가 전달되고, 서버가 로그인 성공이라는 응답을 보내주고, 그걸 다시 받아 로그인 함.\r\n// 서버가 맞는 응답을 보내주는 과정이 필요함. 그래서 필요한 것이 미들웨어.\r\n\r\nexport const initialState = {\r\n    // 초기 값 , 리액트의 state라 보면 됨\r\n    isLoggedIn: false,\r\n    user: {\r\n        nickname: null,\r\n    },\r\n    siginUpData: {\r\n        id: '',\r\n        nick: '',\r\n        password: '',\r\n    },\r\n};\r\n\r\n// 로그인 동작할 때,\r\n// 서버에 요청을 보낸다 -> request -> 비동기로 LOG_IN_SUCCESS or LOG_IN_FAILURE 선택> LOG_IN 동작\r\nexport const LOG_IN = 'LOG_IN'; // 액션의 이름\r\nexport const LOG_IN_SUCCESS = 'LOG_SUCCESS'; // 액션의 이름\r\nexport const LOG_IN_FAILURE = 'LOG_FAILURE'; // 액션의 이름\r\nexport const LOG_OUT = 'LOG_OUT';\r\nexport const SIGN_UP = 'SIGN_UP';\r\nexport const SIGN_UP_SUCCESS = 'SIGN_UP_SUCCESS';\r\n// export const SIGN_UP_ID = 'SIGN_UP_ID';\r\n// export const SIGN_UP_NICK = 'SIGN_UP_NICK';\r\n// export const SIGN_UP_PASSWORD = 'SIGN_UP_PASSWORD';\r\n// 원래는 이렇게 해줘야함.\r\n\r\n// 아래는 set State라 보면됨. Action과 reducer로 분리됨.\r\nexport const signUpSuccess = {\r\n    type: SIGN_UP_SUCCESS,\r\n};\r\n\r\nexport const signUpAction = (data) => {\r\n    // 동적 데이터는 함수?\r\n    return {\r\n        type: SIGN_UP,\r\n        data: data,\r\n    };\r\n};\r\n\r\nexport const loginAction = {\r\n    type: LOG_IN,\r\n};\r\n\r\nexport const logoutAction = {\r\n    type: LOG_OUT,\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case LOG_IN_SUCCESS: {\r\n            return {\r\n                ...state, // 다음 state들 할 행동\r\n                isLoggedIn: true,\r\n                user: dummyUser,\r\n                loginData: action.data,\r\n            };\r\n        }\r\n        case LOG_OUT: {\r\n            return {\r\n                ...state, // 스프레드 문법: 새로운 객체나 배열을 생성하는 문법 매번 다 쓰고 있음\r\n                isLoggedIn: false,\r\n                user: null,\r\n            };\r\n        }\r\n        case LOG_IN_FAILURE: {\r\n            return {\r\n                ...state,\r\n            };\r\n        }\r\n        case SIGN_UP: {\r\n            return {\r\n                ...state,\r\n                signUpData: action.data,\r\n            };\r\n        }\r\n        default: {\r\n            return {\r\n                ...state,\r\n            };\r\n        }\r\n    }\r\n};\r\n\r\nexport default reducer;\r\n// setState((prevState)=>{ 옛날 스테이트와 같아졌는지 확인하기 때문에 새로 생성 해줘야함.\r\n//     return {\r\n//         field: { ...prevState.field},\r\n//     }\r\n// })\r\n\r\n// function* generator() {\r\n//     // 제너레이터 라고 *는 무한의 개념 제너레이터는 함수 실행을 중간에 멈출 수 있고 원할 때 재개 가능\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}
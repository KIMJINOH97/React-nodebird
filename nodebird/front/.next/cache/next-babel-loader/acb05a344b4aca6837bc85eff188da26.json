{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(loadMainPosts),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadPosts),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(loadHashtagPosts),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadHashtagPosts),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(loadUserPosts),\n    _marked10 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadUserPosts),\n    _marked11 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { all, fork, call, takeLatest, put, takeEvery } from 'redux-saga/effects';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_FAILURE, LOAD_MAIN_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE, LOAD_User_POSTS_REQUEST, LOAD_User_POSTS_SUCCESS, LOAD_User_POSTS_FAILURE } from '../reducers/post';\nimport axios from 'axios';\n\nfunction addPostAPI(postData) {\n  return axios.post('/post/', postData, {\n    withCredentials: true\n  });\n}\n\nfunction addPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(addPostAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          console.log('서버에서 받은 data', result.data);\n          _context.next = 7;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 7:\n          _context.next = 14;\n          break;\n\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](0);\n          console.log('시발', _context.t0);\n          _context.next = 14;\n          return put({\n            type: ADD_POST_FAILURE,\n            error: _context.t0\n          });\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 9]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction addCommentAPI() {}\n\nfunction addComment(action) {\n  return _regeneratorRuntime.wrap(function addComment$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          console.log('기다려기다려기다려', action.data.postId);\n          _context3.next = 4;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: {\n              postId: action.data.postId\n            }\n          });\n\n        case 4:\n          _context3.next = 11;\n          break;\n\n        case 6:\n          _context3.prev = 6;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.error(_context3.t0);\n          _context3.next = 11;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            error: _context3.t0\n          });\n\n        case 11:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 6]]);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction loadMainPostsAPI() {\n  return axios.get('/posts'); // 크리덴셜 ㄱㅊ 왜냐면 로그인 안 한 사람도 볼 수 있게\n}\n\nfunction loadMainPosts() {\n  var result;\n  return _regeneratorRuntime.wrap(function loadMainPosts$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return call(loadMainPostsAPI);\n\n        case 3:\n          result = _context5.sent;\n          _context5.next = 6;\n          return put({\n            type: LOAD_MAIN_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context5.next = 13;\n          break;\n\n        case 8:\n          _context5.prev = 8;\n          _context5.t0 = _context5[\"catch\"](0);\n          console.error(_context5.t0);\n          _context5.next = 13;\n          return put({\n            type: LOAD_MAIN_POSTS_FAILURE,\n            error: _context5.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 8]]);\n}\n\nfunction watchLoadPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadPosts$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeEvery(LOAD_MAIN_POSTS_REQUEST, loadHashtagPosts);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nfunction loadHashtagPostsAPI(tag) {\n  return axios.get(\"/hashtag/\".concat(tag)); // 크리덴셜 ㄱㅊ 왜냐면 로그인 안 한 사람도 볼 수 있게\n}\n\nfunction loadHashtagPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadHashtagPosts$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.prev = 0;\n          _context7.next = 3;\n          return call(loadHashtagPostsAPI, action.data);\n\n        case 3:\n          result = _context7.sent;\n          _context7.next = 6;\n          return put({\n            type: LOAD_HASHTAG_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context7.next = 13;\n          break;\n\n        case 8:\n          _context7.prev = 8;\n          _context7.t0 = _context7[\"catch\"](0);\n          console.error(_context7.t0);\n          _context7.next = 13;\n          return put({\n            type: LOAD_HASHTAG_POSTS_FAILURE,\n            error: _context7.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7, null, [[0, 8]]);\n}\n\nfunction watchLoadHashtagPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadHashtagPosts$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeEvery(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}\n\nfunction loadUserPostsAPI(id) {\n  return axios.get(\"/user/\".concat(id, \"/posts\")); // 크리덴셜 ㄱㅊ 왜냐면 로그인 안 한 사람도 볼 수 있게\n}\n\nfunction loadUserPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadUserPosts$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.prev = 0;\n          _context9.next = 3;\n          return call(loadUserPostsAPI, action.data);\n\n        case 3:\n          result = _context9.sent;\n          _context9.next = 6;\n          return put({\n            type: LOAD_USER_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context9.next = 13;\n          break;\n\n        case 8:\n          _context9.prev = 8;\n          _context9.t0 = _context9[\"catch\"](0);\n          console.error(_context9.t0);\n          _context9.next = 13;\n          return put({\n            type: LOAD_USER_POSTS_FAILURE,\n            error: _context9.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9, null, [[0, 8]]);\n}\n\nfunction watchLoadUserPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadUserPosts$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.next = 2;\n          return takeEvery(LOAD_USER_POSTS_REQUEST, loadUserPosts);\n\n        case 2:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked10);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.next = 2;\n          return all([fork(watchAddPost), fork(watchAddComment), fork(watchLoadPosts), fork(watchLoadHashtagPosts), fork(watchLoadUserPosts)]);\n\n        case 2:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, _marked11);\n}","map":{"version":3,"sources":["C:/react-nodebird/nodebird/front/saga/post.js"],"names":["addPost","watchAddPost","addComment","watchAddComment","loadMainPosts","watchLoadPosts","loadHashtagPosts","watchLoadHashtagPosts","loadUserPosts","watchLoadUserPosts","postSaga","all","fork","call","takeLatest","put","takeEvery","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_FAILURE","LOAD_MAIN_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_User_POSTS_REQUEST","LOAD_User_POSTS_SUCCESS","LOAD_User_POSTS_FAILURE","axios","addPostAPI","postData","post","withCredentials","action","data","result","console","log","type","error","addCommentAPI","postId","loadMainPostsAPI","get","loadHashtagPostsAPI","tag","loadUserPostsAPI","id","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","LOAD_USER_POSTS_REQUEST"],"mappings":"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","sourcesContent":["import { all, fork, call, takeLatest, put, takeEvery } from 'redux-saga/effects';\r\nimport {\r\n    ADD_POST_REQUEST,\r\n    ADD_POST_SUCCESS,\r\n    ADD_POST_FAILURE,\r\n    ADD_COMMENT_REQUEST,\r\n    ADD_COMMENT_SUCCESS,\r\n    ADD_COMMENT_FAILURE,\r\n    LOAD_MAIN_POSTS_REQUEST,\r\n    LOAD_MAIN_POSTS_FAILURE,\r\n    LOAD_MAIN_POSTS_SUCCESS,\r\n    LOAD_HASHTAG_POSTS_REQUEST,\r\n    LOAD_HASHTAG_POSTS_SUCCESS,\r\n    LOAD_HASHTAG_POSTS_FAILURE,\r\n    LOAD_User_POSTS_REQUEST,\r\n    LOAD_User_POSTS_SUCCESS,\r\n    LOAD_User_POSTS_FAILURE,\r\n} from '../reducers/post';\r\nimport axios from 'axios';\r\n\r\nfunction addPostAPI(postData) {\r\n    return axios.post('/post/', postData, {\r\n        withCredentials: true,\r\n    });\r\n}\r\n\r\nfunction* addPost(action) {\r\n    try {\r\n        // yield delay(2000);\r\n        const result = yield call(addPostAPI, action.data);\r\n        console.log('서버에서 받은 data', result.data);\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (e) {\r\n        console.log('시발', e);\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            error: e,\r\n        });\r\n    }\r\n}\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost); // 게시글 여러번 눌러도 작성 한번!.\r\n}\r\n\r\nfunction addCommentAPI() {}\r\n\r\nfunction* addComment(action) {\r\n    // ADD_POST_REQUEST 에서 받은 자료, data:{}\r\n    // request에대한 action\r\n    // yield delay(2000);\r\n\r\n    try {\r\n        console.log('기다려기다려기다려', action.data.postId);\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: {\r\n                postId: action.data.postId,\r\n            },\r\n        });\r\n    } catch (e) {\r\n        console.error(e);\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            error: e,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nfunction loadMainPostsAPI() {\r\n    return axios.get('/posts'); // 크리덴셜 ㄱㅊ 왜냐면 로그인 안 한 사람도 볼 수 있게\r\n}\r\n\r\nfunction* loadMainPosts() {\r\n    try {\r\n        const result = yield call(loadMainPostsAPI); // 서버의 응답이 result에 들었음.\r\n        yield put({\r\n            type: LOAD_MAIN_POSTS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (e) {\r\n        console.error(e);\r\n        yield put({\r\n            type: LOAD_MAIN_POSTS_FAILURE,\r\n            error: e,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLoadPosts() {\r\n    yield takeEvery(LOAD_MAIN_POSTS_REQUEST, loadHashtagPosts);\r\n}\r\n\r\nfunction loadHashtagPostsAPI(tag) {\r\n    return axios.get(`/hashtag/${tag}`); // 크리덴셜 ㄱㅊ 왜냐면 로그인 안 한 사람도 볼 수 있게\r\n}\r\n\r\nfunction* loadHashtagPosts(action) {\r\n    try {\r\n        const result = yield call(loadHashtagPostsAPI, action.data); // 서버의 응답이 result에 들었음.\r\n        yield put({\r\n            type: LOAD_HASHTAG_POSTS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (e) {\r\n        console.error(e);\r\n        yield put({\r\n            type: LOAD_HASHTAG_POSTS_FAILURE,\r\n            error: e,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLoadHashtagPosts() {\r\n    yield takeEvery(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\r\n}\r\n\r\nfunction loadUserPostsAPI(id) {\r\n    return axios.get(`/user/${id}/posts`); // 크리덴셜 ㄱㅊ 왜냐면 로그인 안 한 사람도 볼 수 있게\r\n}\r\n\r\nfunction* loadUserPosts(action) {\r\n    try {\r\n        const result = yield call(loadUserPostsAPI, action.data); // 서버의 응답이 result에 들었음.\r\n        yield put({\r\n            type: LOAD_USER_POSTS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (e) {\r\n        console.error(e);\r\n        yield put({\r\n            type: LOAD_USER_POSTS_FAILURE,\r\n            error: e,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLoadUserPosts() {\r\n    yield takeEvery(LOAD_USER_POSTS_REQUEST, loadUserPosts);\r\n}\r\n\r\nexport default function* postSaga() {\r\n    yield all([fork(watchAddPost), fork(watchAddComment), fork(watchLoadPosts), fork(watchLoadHashtagPosts), fork(watchLoadUserPosts)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
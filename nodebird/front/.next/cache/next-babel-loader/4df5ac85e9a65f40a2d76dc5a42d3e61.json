{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"C:\\\\react-nodebird\\\\ch1\\\\front\\\\pages\\\\index.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react'; // next에선 원래 안써도 됨\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport PostCard from '../components/PostCard';\nimport PostForm from '../components/PostForm';\nimport { LOG_IN, LOG_OUT, loginAction, logoutAction } from '../reducers/user'; // const dummy = { 리덕스 state가 가지고 있으므로 필요 없음.\n//     isLoggedIn: true,\n//     imagePaths: [],\n//     mainPosts: [\n//         {\n//             User: {\n//                 id: 1,\n//                 nickname: '제로초',\n//             },\n//             content: '첫 번째 게시글',\n//             img: '',\n//         },\n//     ],\n// };\n\nvar Home = function Home() {\n  _s();\n\n  // hooks\n  var dispatch = useDispatch(); // useState가 useSelector로 바뀌었다 생각하면 되고, setState가 dispatch라 보면 됨.\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      isLoggedIn = _useSelector.isLoggedIn,\n      user = _useSelector.user; // 첫 state는 전체 state 안에는 user와 isloggedin이 들어있음\n\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.post;\n  }),\n      mainPosts = _useSelector2.mainPosts;\n\n  console.log(isLoggedIn, user); // useEffect(() => {\n  //     // 로그인 로그아웃 그냥 테스트용\n  //     dispatch({\n  //         type: LOG_IN,\n  //         data: {\n  //             nickname: '제로초',\n  //         },\n  //     });\n  //     dispatch({\n  //         type: LOG_OUT,\n  //     });\n  //     dispatch(loginAction);\n  //     // dispatch(logoutAction);\n  // }, []);\n\n  return (// user도 훅스로 가져올 수 있음\n    __jsx(React.Fragment, null, __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }\n    }, user ? __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 25\n      }\n    }, \"\\uB85C\\uADF8\\uC778 \\uD588\\uC2B5\\uB2C8\\uB2E4 : \", user.nickname) : __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 65\n      }\n    }, \"\\uB85C\\uADF8\\uC544\\uC6C3 \\uD588\\uC2B5\\uB2C8\\uB2E4.\"), isLoggedIn && __jsx(PostForm, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 32\n      }\n    }), mainPosts.map(function (c) {\n      return __jsx(PostCard, {\n        key: c,\n        post: c,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 28\n        }\n      });\n    })))\n  );\n};\n\n_s(Home, \"hn0PihC44BC/RjSN5kW343tDhtY=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["C:/react-nodebird/ch1/front/pages/index.js"],"names":["React","useEffect","useState","useDispatch","useSelector","PostCard","PostForm","LOG_IN","LOG_OUT","loginAction","logoutAction","Home","dispatch","state","user","isLoggedIn","post","mainPosts","console","log","nickname","map","c"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C,C,CAAoD;;AACpD,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,SAASC,MAAT,EAAiBC,OAAjB,EAA0BC,WAA1B,EAAuCC,YAAvC,QAA2D,kBAA3D,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM;AAAA;;AACf;AACA,MAAMC,QAAQ,GAAGT,WAAW,EAA5B,CAFe,CAIf;;AAJe,qBAKcC,WAAW,CAAC,UAACS,KAAD;AAAA,WAAWA,KAAK,CAACC,IAAjB;AAAA,GAAD,CALzB;AAAA,MAKPC,UALO,gBAKPA,UALO;AAAA,MAKKD,IALL,gBAKKA,IALL,EAKkD;;;AALlD,sBAMOV,WAAW,CAAC,UAACS,KAAD;AAAA,WAAWA,KAAK,CAACG,IAAjB;AAAA,GAAD,CANlB;AAAA,MAMPC,SANO,iBAMPA,SANO;;AAOfC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,UAAZ,EAAwBD,IAAxB,EAPe,CAQf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SACI;AACA,gCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKA,IAAI,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yDAAiBA,IAAI,CAACM,QAAtB,CAAH,GAA2C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4DADpD,EAEKL,UAAU,IAAI,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFnB,EAGKE,SAAS,CAACI,GAAV,CAAc,UAACC,CAAD,EAAO;AAClB,aAAO,MAAC,QAAD;AAAU,QAAA,GAAG,EAAEA,CAAf;AAAkB,QAAA,IAAI,EAAEA,CAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACH,KAFA,CAHL,CADJ;AAFJ;AAYH,CAnCD;;GAAMX,I;UAEeR,W,EAGYC,W,EACPA,W;;;KANpBO,I;AAqCN,eAAeA,IAAf","sourcesContent":["import React, { useEffect, useState } from 'react'; // next에선 원래 안써도 됨\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport PostCard from '../components/PostCard';\r\nimport PostForm from '../components/PostForm';\r\nimport { LOG_IN, LOG_OUT, loginAction, logoutAction } from '../reducers/user';\r\n\r\n// const dummy = { 리덕스 state가 가지고 있으므로 필요 없음.\r\n//     isLoggedIn: true,\r\n//     imagePaths: [],\r\n//     mainPosts: [\r\n//         {\r\n//             User: {\r\n//                 id: 1,\r\n//                 nickname: '제로초',\r\n//             },\r\n//             content: '첫 번째 게시글',\r\n//             img: '',\r\n//         },\r\n//     ],\r\n// };\r\n\r\nconst Home = () => {\r\n    // hooks\r\n    const dispatch = useDispatch();\r\n\r\n    // useState가 useSelector로 바뀌었다 생각하면 되고, setState가 dispatch라 보면 됨.\r\n    const { isLoggedIn, user } = useSelector((state) => state.user); // 첫 state는 전체 state 안에는 user와 isloggedin이 들어있음\r\n    const { mainPosts } = useSelector((state) => state.post);\r\n    console.log(isLoggedIn, user);\r\n    // useEffect(() => {\r\n    //     // 로그인 로그아웃 그냥 테스트용\r\n    //     dispatch({\r\n    //         type: LOG_IN,\r\n    //         data: {\r\n    //             nickname: '제로초',\r\n    //         },\r\n    //     });\r\n    //     dispatch({\r\n    //         type: LOG_OUT,\r\n    //     });\r\n    //     dispatch(loginAction);\r\n    //     // dispatch(logoutAction);\r\n    // }, []);\r\n\r\n    return (\r\n        // user도 훅스로 가져올 수 있음\r\n        <>\r\n            <div>\r\n                {user ? <div>로그인 했습니다 : {user.nickname}</div> : <div>로그아웃 했습니다.</div>}\r\n                {isLoggedIn && <PostForm />}\r\n                {mainPosts.map((c) => {\r\n                    return <PostCard key={c} post={c} />;\r\n                })}\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Home;\r\n"]},"metadata":{},"sourceType":"module"}
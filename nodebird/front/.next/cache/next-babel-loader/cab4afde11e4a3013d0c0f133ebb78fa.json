{"ast":null,"code":"var _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect } from 'react';\nimport { Button, Card, Avatar, Popover, Input, Form, List, Comment } from 'antd';\nimport { RetweetOutlined, HeartTwoTone, HeartOutlined, MessageOutlined, EllipsisOutlined } from '@ant-design/icons';\nimport PropTypes from 'prop-types';\nimport LINK from 'next/link';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ADD_COMMENT_REQUEST } from '../reducers/post';\n\nvar PostCard = function PostCard(_ref) {\n  _s();\n\n  var post = _ref.post;\n\n  var _useState = useState(false),\n      commentFormOpened = _useState[0],\n      setCommentFormOpened = _useState[1];\n\n  var _useState2 = useState(''),\n      commentText = _useState2[0],\n      setCommentText = _useState2[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector.me;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.post;\n  }),\n      isAddingComment = _useSelector2.isAddingComment,\n      commentAdded = _useSelector2.commentAdded;\n\n  var dispatch = useDispatch();\n  var onToggleComment = useCallback(function () {\n    setCommentFormOpened(function (prev) {\n      return !prev;\n    });\n  });\n  console.log(post.id);\n  console.log('포스ㅍ트', post);\n  var onSubmitComment = useCallback(function (e) {\n    e.preventDefault;\n\n    if (!me) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        postId: post.id\n      }\n    }); // useCallback에서 state를 넣어주면 상속에 넣어줘야함\n  }, [me && me.id]); // 객체의 값을 넣우주도록 비교때메 에러나기가 쉬움.\n  // 처음의 me를 기억해 null상태를 기억함.\n\n  useEffect(function () {\n    setCommentText('');\n  }, [commentAdded == true]);\n  var onChangeCommentText = useCallback(function (e) {\n    e.preventDefault;\n    setCommentText(e.target.value);\n  }, []);\n  return __jsx(React.Fragment, null, __jsx(Card, {\n    cover: post.img && __jsx(\"img\", {\n      alt: \"example\",\n      src: post.img\n    }),\n    actions: [__jsx(RetweetOutlined, null), __jsx(HeartTwoTone, null), __jsx(MessageOutlined, {\n      onClick: onToggleComment\n    }), __jsx(Popover, {\n      key: \"ellipsis\",\n      content: __jsx(Button.Group, null, __jsx(Button, null, \"\\uC2E0\\uACE0\"), __jsx(Button, null, \"\\uC218\\uC815\"), __jsx(Button, {\n        danger: true\n      }, \"\\uC0AD\\uC81C\"))\n    }, __jsx(EllipsisOutlined, null))],\n    extra: __jsx(Button, null, \"\\uD314\\uB85C\\uC6B0\")\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Avatar, null, post.User.nickname[0]),\n    title: post.User.nickname,\n    description: __jsx(\"div\", null, post.content.split(/(#[^\\s]+)/g).map(function (v) {\n      // 문자열 쪼갬 해쉬테그 빼고 쪼갬. ex) ['#구독', \" \", \"#좋아요\", \"이런식\"]\n      if (v.match(/#[^\\s]+/)) {\n        // 진짜 해쉬테그는 링크로\n        return __jsx(LINK, {\n          href: \"/hashtag\",\n          key: v\n        }, __jsx(\"a\", null, v));\n      } else {\n        return __jsx(React.Fragment, null, v);\n      }\n    })) // a tag -> LINK로 써야함.\n\n  })), commentFormOpened && __jsx(React.Fragment, null, __jsx(Form, {\n    onFinish: onSubmitComment,\n    style: {\n      paddingTop: '10px'\n    }\n  }, __jsx(Form.Item, null, __jsx(Input.TextArea, {\n    rows: 4,\n    value: commentText,\n    onChange: onChangeCommentText\n  })), __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: isAddingComment\n  }, \"\\uC090\\uC57D\")), __jsx(List, {\n    header: \"\".concat(post.Comments ? post.Comments.length : 0, \" \\uB313\\uAE00\"),\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments || [],\n    renderItem: function renderItem(item) {\n      return __jsx(\"li\", null, __jsx(Comment, {\n        author: item.User.nickname,\n        avatar: __jsx(Avatar, null, item.User.nickname),\n        content: item.content\n      }));\n    } // 해쉬테그 링크 넣기는 따라는 쉬워도 어렵다.\n    // 따라 하는것으론 실력 안 는다. 응용해서 새로운것을 추가적으로 만드는 노력이 필요.\n\n  })));\n};\n\n_s(PostCard, \"8iKPLr0kkGEu/87MtOflcGvxyLg=\", false, function () {\n  return [useSelector, useSelector, useDispatch];\n});\n\n_c = PostCard;\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    User: PropTypes.object,\n    content: PropTypes.string,\n    img: PropTypes.string,\n    createdAt: PropTypes.string\n  })\n};\nexport default PostCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostCard\");","map":{"version":3,"sources":["C:/react-nodebird/nodebird/front/components/PostCard.js"],"names":["React","useState","useCallback","useEffect","Button","Card","Avatar","Popover","Input","Form","List","Comment","RetweetOutlined","HeartTwoTone","HeartOutlined","MessageOutlined","EllipsisOutlined","PropTypes","LINK","useSelector","useDispatch","ADD_COMMENT_REQUEST","PostCard","post","commentFormOpened","setCommentFormOpened","commentText","setCommentText","state","user","me","isAddingComment","commentAdded","dispatch","onToggleComment","prev","console","log","id","onSubmitComment","e","preventDefault","alert","type","data","postId","onChangeCommentText","target","value","img","User","nickname","content","split","map","v","match","paddingTop","Comments","length","item","propTypes","shape","object","string","createdAt"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react';\r\nimport { Button, Card, Avatar, Popover, Input, Form, List, Comment } from 'antd';\r\nimport { RetweetOutlined, HeartTwoTone, HeartOutlined, MessageOutlined, EllipsisOutlined } from '@ant-design/icons';\r\nimport PropTypes from 'prop-types';\r\nimport LINK from 'next/link';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { ADD_COMMENT_REQUEST } from '../reducers/post';\r\n\r\nconst PostCard = ({ post }) => {\r\n    const [commentFormOpened, setCommentFormOpened] = useState(false);\r\n    const [commentText, setCommentText] = useState('');\r\n    const { me } = useSelector((state) => state.user);\r\n    const { isAddingComment, commentAdded } = useSelector((state) => state.post);\r\n    const dispatch = useDispatch();\r\n\r\n    const onToggleComment = useCallback(() => {\r\n        setCommentFormOpened((prev) => !prev);\r\n    });\r\n    console.log(post.id);\r\n    console.log('포스ㅍ트', post);\r\n    const onSubmitComment = useCallback(\r\n        (e) => {\r\n            e.preventDefault;\r\n            if (!me) {\r\n                return alert('로그인이 필요합니다.');\r\n            }\r\n\r\n            dispatch({\r\n                type: ADD_COMMENT_REQUEST,\r\n                data: {\r\n                    postId: post.id,\r\n                },\r\n            });\r\n            // useCallback에서 state를 넣어주면 상속에 넣어줘야함\r\n        },\r\n        [me && me.id]\r\n    ); // 객체의 값을 넣우주도록 비교때메 에러나기가 쉬움.\r\n    // 처음의 me를 기억해 null상태를 기억함.\r\n\r\n    useEffect(() => {\r\n        setCommentText('');\r\n    }, [commentAdded == true]);\r\n\r\n    const onChangeCommentText = useCallback((e) => {\r\n        e.preventDefault;\r\n        setCommentText(e.target.value);\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <Card\r\n                cover={post.img && <img alt=\"example\" src={post.img} />}\r\n                actions={[\r\n                    <RetweetOutlined />,\r\n                    <HeartTwoTone />,\r\n                    <MessageOutlined onClick={onToggleComment} />,\r\n                    <Popover\r\n                        key=\"ellipsis\"\r\n                        content={\r\n                            <Button.Group>\r\n                                <Button>신고</Button>\r\n                                <Button>수정</Button>\r\n                                <Button danger>삭제</Button>\r\n                            </Button.Group>\r\n                        }\r\n                    >\r\n                        <EllipsisOutlined />\r\n                    </Popover>,\r\n                ]}\r\n                extra={<Button>팔로우</Button>}\r\n            >\r\n                <Card.Meta\r\n                    avatar={<Avatar>{post.User.nickname[0]}</Avatar>}\r\n                    title={post.User.nickname}\r\n                    description={\r\n                        <div>\r\n                            {post.content.split(/(#[^\\s]+)/g).map((v) => {\r\n                                // 문자열 쪼갬 해쉬테그 빼고 쪼갬. ex) ['#구독', \" \", \"#좋아요\", \"이런식\"]\r\n                                if (v.match(/#[^\\s]+/)) {\r\n                                    // 진짜 해쉬테그는 링크로\r\n                                    return (\r\n                                        <LINK href=\"/hashtag\" key={v}>\r\n                                            <a>{v}</a>\r\n                                        </LINK>\r\n                                    );\r\n                                } else {\r\n                                    return <>{v}</>;\r\n                                }\r\n                            })}\r\n                        </div>\r\n                    } // a tag -> LINK로 써야함.\r\n                ></Card.Meta>\r\n            </Card>\r\n            {commentFormOpened && (\r\n                <>\r\n                    <Form onFinish={onSubmitComment} style={{ paddingTop: '10px' }}>\r\n                        <Form.Item>\r\n                            <Input.TextArea rows={4} value={commentText} onChange={onChangeCommentText} />\r\n                        </Form.Item>\r\n                        <Button type=\"primary\" htmlType=\"submit\" loading={isAddingComment}>\r\n                            삐약\r\n                        </Button>\r\n                    </Form>\r\n                    <List\r\n                        header={`${post.Comments ? post.Comments.length : 0} 댓글`}\r\n                        itemLayout=\"horizontal\"\r\n                        dataSource={post.Comments || []}\r\n                        renderItem={(item) => (\r\n                            <li>\r\n                                <Comment\r\n                                    author={item.User.nickname}\r\n                                    avatar={<Avatar>{item.User.nickname}</Avatar>}\r\n                                    content={item.content}\r\n                                />\r\n                            </li>\r\n                        )} // 해쉬테그 링크 넣기는 따라는 쉬워도 어렵다.\r\n                        // 따라 하는것으론 실력 안 는다. 응용해서 새로운것을 추가적으로 만드는 노력이 필요.\r\n                    />\r\n                </>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nPostCard.propTypes = {\r\n    post: PropTypes.shape({\r\n        User: PropTypes.object,\r\n        content: PropTypes.string,\r\n        img: PropTypes.string,\r\n        createdAt: PropTypes.string,\r\n    }),\r\n};\r\nexport default PostCard;\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport const initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: '제로초'\n    },\n    content: '첫 번째 게시글',\n    img: ''\n  } // 화면의 포스트 들\n  ],\n  imagePath: [],\n  // 미리보기 이미지 경로\n  addPostError: false,\n  // 포스트 업로드 실패 사유\n  isAddingPost: false,\n  // 포스트 업로드 중\n  postAdded: false,\n  // 포스트 업로드 성공\n  addCommentError: '',\n  isAddingComment: false,\n  commentAdded: false\n};\nconst dummyPost = {\n  id: 2,\n  User: {\n    id: 1,\n    nickname: '제로초'\n  },\n  content: '나는 더미 입니다.',\n  Comments: []\n};\nconst dummyComment = {\n  id: 1,\n  User: {\n    id: 1,\n    nickname: '제로초'\n  },\n  createdAt: new Date(),\n  content: '더미 댓글 입니다.'\n};\nexport const LOAD_MAIN_POSTS_REQUEST = 'LOAD_MAIN_POSTS_REQUEST';\nexport const LOAD_MAIN_POSTS_SUCCESS = 'LOAD_MAIN_POSTS_SUCCESS';\nexport const LOAD_MAIN_POSTS_FAILURE = 'LOAD_MAIN_POSTS_FAILURE';\nexport const LOAD_HASHTAG_POSTS_REQUEST = 'LOAD_HASHTAG_POSTS_REQUEST';\nexport const LOAD_HASHTAG_POSTS_SUCCESS = 'LOAD_HASHTAG_POSTS_SUCCESS';\nexport const LOAD_HASHTAG_POSTS_FAILURE = 'LOAD_HASHTAG_POSTS_FAILURE';\nexport const LOAD_IMAGES_POSTS_REQUEST = 'LOAD_IMAGES_POSTS_REQUEST';\nexport const LOAD_IMAGES_POSTS_SUCCESS = 'LOAD_IMAGES_POSTS_SUCCESS';\nexport const LOAD_IMAGES_POSTS_FAILURE = 'LOAD_IMAGES_POSTS_FAILURE';\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE';\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\nexport const LOAD_COMMENTS_REQUEST = 'LOAD_COMMENTS_REQUEST';\nexport const LOAD_COMMENTS_SUCCESS = 'LOAD_COMMENTS_SUCCESS';\nexport const LOAD_COMMENTS_FAILURE = 'LOAD_COMMENTS_FAILURE';\nexport const RETWEET_REQUEST = 'RETWEET_REQUEST';\nexport const RETWEET_SUCCESS = 'RETWEET_SUCCESS';\nexport const RETWEET_FAILURE = 'RETWEET_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          isAddingPost: true\n        });\n      }\n\n    case ADD_POST_SUCCESS:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          isAddingPost: false,\n          postAdded: true,\n          mainPosts: [dummyPost, ...state.mainPosts] // 더미 포스트가 기존 포스터 앞에 들어감\n\n        });\n      }\n\n    case ADD_POST_FAILURE:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          isAddingPost: false,\n          addPostError: action.error // 포스트 업로드 실패 사유\n\n        });\n      }\n\n    case ADD_COMMENT_REQUEST:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          isAddingComment: true\n        });\n      }\n\n    case ADD_COMMENT_SUCCESS:\n      {\n        const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId); // 성공에 대한 action.data.postId로 게시글 위치를 찾음\n\n        const post = state.mainPosts[postIndex]; // 찾은 위치로 게시글 선택\n\n        const Comments = [...post.Comments, action.data.comment];\n        const mainPosts = [...state.mainPosts]; // 모든 것은 불변성때문임.\n\n        mainPosts[postIndex] = _objectSpread(_objectSpread({}, post), {}, {\n          Comments\n        });\n        return _objectSpread(_objectSpread({}, state), {}, {\n          isAddingComment: false,\n          mainPosts,\n          commentAdded: true // dummyComment,\n\n        });\n      }\n\n    case ADD_COMMENT_FAILURE:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          commentAdded: false,\n          addCommentError: action.error\n        });\n      }\n\n    default:\n      {\n        return _objectSpread({}, state);\n      }\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/react-nodebird/ch1/front/reducers/post.js"],"names":["initialState","mainPosts","id","User","nickname","content","img","imagePath","addPostError","isAddingPost","postAdded","addCommentError","isAddingComment","commentAdded","dummyPost","Comments","dummyComment","createdAt","Date","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_SUCCESS","LOAD_MAIN_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_IMAGES_POSTS_REQUEST","LOAD_IMAGES_POSTS_SUCCESS","LOAD_IMAGES_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_IMAGE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","LOAD_COMMENTS_REQUEST","LOAD_COMMENTS_SUCCESS","LOAD_COMMENTS_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","reducer","state","action","type","error","postIndex","findIndex","v","data","postId","post","comment"],"mappings":"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","sourcesContent":["export const initialState = {\r\n    mainPosts: [\r\n        {\r\n            id: 1,\r\n            User: {\r\n                id: 1,\r\n                nickname: '제로초',\r\n            },\r\n            content: '첫 번째 게시글',\r\n            img: '',\r\n        }, // 화면의 포스트 들\r\n    ],\r\n    imagePath: [], // 미리보기 이미지 경로\r\n    addPostError: false, // 포스트 업로드 실패 사유\r\n    isAddingPost: false, // 포스트 업로드 중\r\n    postAdded: false, // 포스트 업로드 성공\r\n    addCommentError: '',\r\n    isAddingComment: false,\r\n    commentAdded: false,\r\n};\r\n\r\nconst dummyPost = {\r\n    id: 2,\r\n    User: {\r\n        id: 1,\r\n        nickname: '제로초',\r\n    },\r\n    content: '나는 더미 입니다.',\r\n    Comments: [],\r\n};\r\n\r\nconst dummyComment = {\r\n    id: 1,\r\n    User: {\r\n        id: 1,\r\n        nickname: '제로초',\r\n    },\r\n    createdAt: new Date(),\r\n    content: '더미 댓글 입니다.',\r\n};\r\n\r\nexport const LOAD_MAIN_POSTS_REQUEST = 'LOAD_MAIN_POSTS_REQUEST';\r\nexport const LOAD_MAIN_POSTS_SUCCESS = 'LOAD_MAIN_POSTS_SUCCESS';\r\nexport const LOAD_MAIN_POSTS_FAILURE = 'LOAD_MAIN_POSTS_FAILURE';\r\n\r\nexport const LOAD_HASHTAG_POSTS_REQUEST = 'LOAD_HASHTAG_POSTS_REQUEST';\r\nexport const LOAD_HASHTAG_POSTS_SUCCESS = 'LOAD_HASHTAG_POSTS_SUCCESS';\r\nexport const LOAD_HASHTAG_POSTS_FAILURE = 'LOAD_HASHTAG_POSTS_FAILURE';\r\n\r\nexport const LOAD_IMAGES_POSTS_REQUEST = 'LOAD_IMAGES_POSTS_REQUEST';\r\nexport const LOAD_IMAGES_POSTS_SUCCESS = 'LOAD_IMAGES_POSTS_SUCCESS';\r\nexport const LOAD_IMAGES_POSTS_FAILURE = 'LOAD_IMAGES_POSTS_FAILURE';\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE';\r\n\r\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\r\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\r\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\r\n\r\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\r\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\r\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\r\n\r\nexport const LOAD_COMMENTS_REQUEST = 'LOAD_COMMENTS_REQUEST';\r\nexport const LOAD_COMMENTS_SUCCESS = 'LOAD_COMMENTS_SUCCESS';\r\nexport const LOAD_COMMENTS_FAILURE = 'LOAD_COMMENTS_FAILURE';\r\n\r\nexport const RETWEET_REQUEST = 'RETWEET_REQUEST';\r\nexport const RETWEET_SUCCESS = 'RETWEET_SUCCESS';\r\nexport const RETWEET_FAILURE = 'RETWEET_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ADD_POST_REQUEST: {\r\n            return {\r\n                ...state,\r\n                isAddingPost: true,\r\n            };\r\n        }\r\n        case ADD_POST_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                isAddingPost: false,\r\n                postAdded: true,\r\n                mainPosts: [dummyPost, ...state.mainPosts], // 더미 포스트가 기존 포스터 앞에 들어감\r\n            };\r\n        }\r\n        case ADD_POST_FAILURE: {\r\n            return {\r\n                ...state,\r\n                isAddingPost: false,\r\n                addPostError: action.error, // 포스트 업로드 실패 사유\r\n            };\r\n        }\r\n        case ADD_COMMENT_REQUEST: {\r\n            return {\r\n                ...state,\r\n                isAddingComment: true,\r\n            };\r\n        }\r\n        case ADD_COMMENT_SUCCESS: {\r\n            const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\r\n            // 성공에 대한 action.data.postId로 게시글 위치를 찾음\r\n            const post = state.mainPosts[postIndex]; // 찾은 위치로 게시글 선택\r\n            const Comments = [...post.Comments, action.data.comment];\r\n            const mainPosts = [...state.mainPosts]; // 모든 것은 불변성때문임.\r\n            mainPosts[postIndex] = { ...post, Comments };\r\n            return {\r\n                ...state,\r\n                isAddingComment: false,\r\n                mainPosts,\r\n                commentAdded: true,\r\n                // dummyComment,\r\n            };\r\n        }\r\n        case ADD_COMMENT_FAILURE: {\r\n            return {\r\n                ...state,\r\n                commentAdded: false,\r\n                addCommentError: action.error,\r\n            };\r\n        }\r\n        default: {\r\n            return {\r\n                ...state,\r\n            };\r\n        }\r\n    }\r\n};\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}
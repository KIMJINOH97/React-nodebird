{"ast":null,"code":"import { all, fork, call, takeLatest, put, takeEvery } from 'redux-saga/effects';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_FAILURE, LOAD_MAIN_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE, LOAD_User_POSTS_REQUEST, LOAD_User_POSTS_SUCCESS, LOAD_User_POSTS_FAILURE } from '../reducers/post';\nimport axios from 'axios';\n\nfunction addPostAPI(postData) {\n  return axios.post('/post/', postData, {\n    withCredentials: true\n  });\n}\n\nfunction* addPost(action) {\n  try {\n    // yield delay(2000);\n    const result = yield call(addPostAPI, action.data);\n    console.log('서버에서 받은 data', result.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.log('시발', e);\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost); // 게시글 여러번 눌러도 작성 한번!.\n}\n\nfunction addCommentAPI() {}\n\nfunction* addComment(action) {\n  // ADD_POST_REQUEST 에서 받은 자료, data:{}\n  // request에대한 action\n  // yield delay(2000);\n  try {\n    console.log('기다려기다려기다려', action.data.postId);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: {\n        postId: action.data.postId\n      }\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction loadMainPostsAPI() {\n  return axios.get('/posts'); // 크리덴셜 ㄱㅊ 왜냐면 로그인 안 한 사람도 볼 수 있게\n}\n\nfunction* loadMainPosts() {\n  try {\n    const result = yield call(loadMainPostsAPI); // 서버의 응답이 result에 들었음.\n\n    yield put({\n      type: LOAD_MAIN_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOAD_MAIN_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadPosts() {\n  yield takeEvery(LOAD_MAIN_POSTS_REQUEST, loadHashtagPosts);\n}\n\nfunction loadHashtagPostsAPI(tag) {\n  return axios.get(`/hashtag/${tag}`); // 크리덴셜 ㄱㅊ 왜냐면 로그인 안 한 사람도 볼 수 있게\n}\n\nfunction* loadHashtagPosts() {\n  try {\n    const result = yield call(loadHashtagPostsAPI); // 서버의 응답이 result에 들었음.\n\n    yield put({\n      type: LOAD_HASHTAG_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOAD_HASHTAG_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadHashtagPosts() {\n  yield takeEvery(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n}\n\nfunction loadUserPostsAPI(id) {\n  return axios.get(`/user/${id}/posts`); // 크리덴셜 ㄱㅊ 왜냐면 로그인 안 한 사람도 볼 수 있게\n}\n\nfunction* loadUserPosts() {\n  try {\n    const result = yield call(loadUserPostsAPI); // 서버의 응답이 result에 들었음.\n\n    yield put({\n      type: LOAD_USER_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOAD_USER_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadUserPosts() {\n  yield takeEvery(LOAD_USER_POSTS_REQUEST, loadUserPosts);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment), fork(watchLoadPosts), fork(watchLoadHashtagPosts), fork(watchLoadUserPosts)]);\n}","map":{"version":3,"sources":["C:/react-nodebird/nodebird/front/saga/post.js"],"names":["all","fork","call","takeLatest","put","takeEvery","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_FAILURE","LOAD_MAIN_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_User_POSTS_REQUEST","LOAD_User_POSTS_SUCCESS","LOAD_User_POSTS_FAILURE","axios","addPostAPI","postData","post","withCredentials","addPost","action","result","data","console","log","type","e","error","watchAddPost","addCommentAPI","addComment","postId","watchAddComment","loadMainPostsAPI","get","loadMainPosts","watchLoadPosts","loadHashtagPosts","loadHashtagPostsAPI","tag","watchLoadHashtagPosts","loadUserPostsAPI","id","loadUserPosts","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","watchLoadUserPosts","LOAD_USER_POSTS_REQUEST","postSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,UAA1B,EAAsCC,GAAtC,EAA2CC,SAA3C,QAA4D,oBAA5D;AACA,SACIC,gBADJ,EAEIC,gBAFJ,EAGIC,gBAHJ,EAIIC,mBAJJ,EAKIC,mBALJ,EAMIC,mBANJ,EAOIC,uBAPJ,EAQIC,uBARJ,EASIC,uBATJ,EAUIC,0BAVJ,EAWIC,0BAXJ,EAYIC,0BAZJ,EAaIC,uBAbJ,EAcIC,uBAdJ,EAeIC,uBAfJ,QAgBO,kBAhBP;AAiBA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,UAAT,CAAoBC,QAApB,EAA8B;AAC1B,SAAOF,KAAK,CAACG,IAAN,CAAW,QAAX,EAAqBD,QAArB,EAA+B;AAClCE,IAAAA,eAAe,EAAE;AADiB,GAA/B,CAAP;AAGH;;AAED,UAAUC,OAAV,CAAkBC,MAAlB,EAA0B;AACtB,MAAI;AACA;AACA,UAAMC,MAAM,GAAG,MAAM1B,IAAI,CAACoB,UAAD,EAAaK,MAAM,CAACE,IAApB,CAAzB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BH,MAAM,CAACC,IAAnC;AACA,UAAMzB,GAAG,CAAC;AACN4B,MAAAA,IAAI,EAAEzB,gBADA;AAENsB,MAAAA,IAAI,EAAED,MAAM,CAACC;AAFP,KAAD,CAAT;AAIH,GARD,CAQE,OAAOI,CAAP,EAAU;AACRH,IAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ,EAAkBE,CAAlB;AACA,UAAM7B,GAAG,CAAC;AACN4B,MAAAA,IAAI,EAAExB,gBADA;AAEN0B,MAAAA,KAAK,EAAED;AAFD,KAAD,CAAT;AAIH;AACJ;;AACD,UAAUE,YAAV,GAAyB;AACrB,QAAMhC,UAAU,CAACG,gBAAD,EAAmBoB,OAAnB,CAAhB,CADqB,CACwB;AAChD;;AAED,SAASU,aAAT,GAAyB,CAAE;;AAE3B,UAAUC,UAAV,CAAqBV,MAArB,EAA6B;AACzB;AACA;AACA;AAEA,MAAI;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBJ,MAAM,CAACE,IAAP,CAAYS,MAArC;AACA,UAAMlC,GAAG,CAAC;AACN4B,MAAAA,IAAI,EAAEtB,mBADA;AAENmB,MAAAA,IAAI,EAAE;AACFS,QAAAA,MAAM,EAAEX,MAAM,CAACE,IAAP,CAAYS;AADlB;AAFA,KAAD,CAAT;AAMH,GARD,CAQE,OAAOL,CAAP,EAAU;AACRH,IAAAA,OAAO,CAACI,KAAR,CAAcD,CAAd;AACA,UAAM7B,GAAG,CAAC;AACN4B,MAAAA,IAAI,EAAErB,mBADA;AAENuB,MAAAA,KAAK,EAAED;AAFD,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUM,eAAV,GAA4B;AACxB,QAAMpC,UAAU,CAACM,mBAAD,EAAsB4B,UAAtB,CAAhB;AACH;;AAED,SAASG,gBAAT,GAA4B;AACxB,SAAOnB,KAAK,CAACoB,GAAN,CAAU,QAAV,CAAP,CADwB,CACI;AAC/B;;AAED,UAAUC,aAAV,GAA0B;AACtB,MAAI;AACA,UAAMd,MAAM,GAAG,MAAM1B,IAAI,CAACsC,gBAAD,CAAzB,CADA,CAC6C;;AAC7C,UAAMpC,GAAG,CAAC;AACN4B,MAAAA,IAAI,EAAElB,uBADA;AAENe,MAAAA,IAAI,EAAED,MAAM,CAACC;AAFP,KAAD,CAAT;AAIH,GAND,CAME,OAAOI,CAAP,EAAU;AACRH,IAAAA,OAAO,CAACI,KAAR,CAAcD,CAAd;AACA,UAAM7B,GAAG,CAAC;AACN4B,MAAAA,IAAI,EAAEnB,uBADA;AAENqB,MAAAA,KAAK,EAAED;AAFD,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUU,cAAV,GAA2B;AACvB,QAAMtC,SAAS,CAACO,uBAAD,EAA0BgC,gBAA1B,CAAf;AACH;;AAED,SAASC,mBAAT,CAA6BC,GAA7B,EAAkC;AAC9B,SAAOzB,KAAK,CAACoB,GAAN,CAAW,YAAWK,GAAI,EAA1B,CAAP,CAD8B,CACO;AACxC;;AAED,UAAUF,gBAAV,GAA6B;AACzB,MAAI;AACA,UAAMhB,MAAM,GAAG,MAAM1B,IAAI,CAAC2C,mBAAD,CAAzB,CADA,CACgD;;AAChD,UAAMzC,GAAG,CAAC;AACN4B,MAAAA,IAAI,EAAEhB,0BADA;AAENa,MAAAA,IAAI,EAAED,MAAM,CAACC;AAFP,KAAD,CAAT;AAIH,GAND,CAME,OAAOI,CAAP,EAAU;AACRH,IAAAA,OAAO,CAACI,KAAR,CAAcD,CAAd;AACA,UAAM7B,GAAG,CAAC;AACN4B,MAAAA,IAAI,EAAEf,0BADA;AAENiB,MAAAA,KAAK,EAAED;AAFD,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUc,qBAAV,GAAkC;AAC9B,QAAM1C,SAAS,CAACU,0BAAD,EAA6B6B,gBAA7B,CAAf;AACH;;AAED,SAASI,gBAAT,CAA0BC,EAA1B,EAA8B;AAC1B,SAAO5B,KAAK,CAACoB,GAAN,CAAW,SAAQQ,EAAG,QAAtB,CAAP,CAD0B,CACa;AAC1C;;AAED,UAAUC,aAAV,GAA0B;AACtB,MAAI;AACA,UAAMtB,MAAM,GAAG,MAAM1B,IAAI,CAAC8C,gBAAD,CAAzB,CADA,CAC6C;;AAC7C,UAAM5C,GAAG,CAAC;AACN4B,MAAAA,IAAI,EAAEmB,uBADA;AAENtB,MAAAA,IAAI,EAAED,MAAM,CAACC;AAFP,KAAD,CAAT;AAIH,GAND,CAME,OAAOI,CAAP,EAAU;AACRH,IAAAA,OAAO,CAACI,KAAR,CAAcD,CAAd;AACA,UAAM7B,GAAG,CAAC;AACN4B,MAAAA,IAAI,EAAEoB,uBADA;AAENlB,MAAAA,KAAK,EAAED;AAFD,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUoB,kBAAV,GAA+B;AAC3B,QAAMhD,SAAS,CAACiD,uBAAD,EAA0BJ,aAA1B,CAAf;AACH;;AAED,eAAe,UAAUK,QAAV,GAAqB;AAChC,QAAMvD,GAAG,CAAC,CAACC,IAAI,CAACkC,YAAD,CAAL,EAAqBlC,IAAI,CAACsC,eAAD,CAAzB,EAA4CtC,IAAI,CAAC0C,cAAD,CAAhD,EAAkE1C,IAAI,CAAC8C,qBAAD,CAAtE,EAA+F9C,IAAI,CAACoD,kBAAD,CAAnG,CAAD,CAAT;AACH","sourcesContent":["import { all, fork, call, takeLatest, put, takeEvery } from 'redux-saga/effects';\r\nimport {\r\n    ADD_POST_REQUEST,\r\n    ADD_POST_SUCCESS,\r\n    ADD_POST_FAILURE,\r\n    ADD_COMMENT_REQUEST,\r\n    ADD_COMMENT_SUCCESS,\r\n    ADD_COMMENT_FAILURE,\r\n    LOAD_MAIN_POSTS_REQUEST,\r\n    LOAD_MAIN_POSTS_FAILURE,\r\n    LOAD_MAIN_POSTS_SUCCESS,\r\n    LOAD_HASHTAG_POSTS_REQUEST,\r\n    LOAD_HASHTAG_POSTS_SUCCESS,\r\n    LOAD_HASHTAG_POSTS_FAILURE,\r\n    LOAD_User_POSTS_REQUEST,\r\n    LOAD_User_POSTS_SUCCESS,\r\n    LOAD_User_POSTS_FAILURE,\r\n} from '../reducers/post';\r\nimport axios from 'axios';\r\n\r\nfunction addPostAPI(postData) {\r\n    return axios.post('/post/', postData, {\r\n        withCredentials: true,\r\n    });\r\n}\r\n\r\nfunction* addPost(action) {\r\n    try {\r\n        // yield delay(2000);\r\n        const result = yield call(addPostAPI, action.data);\r\n        console.log('서버에서 받은 data', result.data);\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (e) {\r\n        console.log('시발', e);\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            error: e,\r\n        });\r\n    }\r\n}\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost); // 게시글 여러번 눌러도 작성 한번!.\r\n}\r\n\r\nfunction addCommentAPI() {}\r\n\r\nfunction* addComment(action) {\r\n    // ADD_POST_REQUEST 에서 받은 자료, data:{}\r\n    // request에대한 action\r\n    // yield delay(2000);\r\n\r\n    try {\r\n        console.log('기다려기다려기다려', action.data.postId);\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: {\r\n                postId: action.data.postId,\r\n            },\r\n        });\r\n    } catch (e) {\r\n        console.error(e);\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            error: e,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nfunction loadMainPostsAPI() {\r\n    return axios.get('/posts'); // 크리덴셜 ㄱㅊ 왜냐면 로그인 안 한 사람도 볼 수 있게\r\n}\r\n\r\nfunction* loadMainPosts() {\r\n    try {\r\n        const result = yield call(loadMainPostsAPI); // 서버의 응답이 result에 들었음.\r\n        yield put({\r\n            type: LOAD_MAIN_POSTS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (e) {\r\n        console.error(e);\r\n        yield put({\r\n            type: LOAD_MAIN_POSTS_FAILURE,\r\n            error: e,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLoadPosts() {\r\n    yield takeEvery(LOAD_MAIN_POSTS_REQUEST, loadHashtagPosts);\r\n}\r\n\r\nfunction loadHashtagPostsAPI(tag) {\r\n    return axios.get(`/hashtag/${tag}`); // 크리덴셜 ㄱㅊ 왜냐면 로그인 안 한 사람도 볼 수 있게\r\n}\r\n\r\nfunction* loadHashtagPosts() {\r\n    try {\r\n        const result = yield call(loadHashtagPostsAPI); // 서버의 응답이 result에 들었음.\r\n        yield put({\r\n            type: LOAD_HASHTAG_POSTS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (e) {\r\n        console.error(e);\r\n        yield put({\r\n            type: LOAD_HASHTAG_POSTS_FAILURE,\r\n            error: e,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLoadHashtagPosts() {\r\n    yield takeEvery(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\r\n}\r\n\r\nfunction loadUserPostsAPI(id) {\r\n    return axios.get(`/user/${id}/posts`); // 크리덴셜 ㄱㅊ 왜냐면 로그인 안 한 사람도 볼 수 있게\r\n}\r\n\r\nfunction* loadUserPosts() {\r\n    try {\r\n        const result = yield call(loadUserPostsAPI); // 서버의 응답이 result에 들었음.\r\n        yield put({\r\n            type: LOAD_USER_POSTS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (e) {\r\n        console.error(e);\r\n        yield put({\r\n            type: LOAD_USER_POSTS_FAILURE,\r\n            error: e,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLoadUserPosts() {\r\n    yield takeEvery(LOAD_USER_POSTS_REQUEST, loadUserPosts);\r\n}\r\n\r\nexport default function* postSaga() {\r\n    yield all([fork(watchAddPost), fork(watchAddComment), fork(watchLoadPosts), fork(watchLoadHashtagPosts), fork(watchLoadUserPosts)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"C:\\\\react-nodebird\\\\nodebird\\\\front\\\\components\\\\PostForm.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useCallback, useState, useEffect } from 'react';\nimport { Form, Input, Button } from 'antd';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ADD_POST_REQUEST } from '../reducers/post';\nimport _default from 'antd/lib/time-picker'; // const dummy = {\n//     isLoggedIn: true,\n//     imagePaths: [],\n//     mainPosts: [\n//         {\n//             User: {\n//                 id: 1,\n//                 nickname: '제로초',\n//             },\n//             content: '첫 번째 게시글',\n//             img: '',\n//         },\n//     ],\n// };\n\nvar PostForm = function PostForm() {\n  _s();\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      imagePath = _useSelector.imagePath,\n      isAddingPost = _useSelector.isAddingPost,\n      postAdded = _useSelector.postAdded;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector2.me;\n\n  var dispatch = useDispatch();\n\n  var _useState = useState(''),\n      text = _useState[0],\n      setText = _useState[1];\n\n  useEffect(function () {\n    setText('');\n  }, [postAdded === true]); // 포스트 업로드 되면 text안 값 비워줌.\n\n  var onChangeText = useCallback(function (e) {\n    setText(e.target.value);\n  }, []);\n  var onSubmitForm = useCallback(function (e) {\n    e.preventDefault; // 페이지 안 넘어가게끔 해줌\n\n    if (!text || !text.trim()) {\n      // 공백 검사도 같이 해준다.\n      return alert('게시글을 작성하세요');\n    }\n\n    console.log('post 요청했어!!');\n    dispatch({\n      type: ADD_POST_REQUEST,\n      data: {\n        content: text,\n        user: me\n      }\n    });\n  }, [text]); // userCallback은 기억력이 강력해서 [] 안에 넣어줘야 변동사항이 저장됨.\n\n  return (// 이미지 업로드 해야하기 때문에 encType은 multipart임\n    // style넣을 때는 객체 형식으로 {{ 넣어야함 }}\n    __jsx(Form, {\n      encType: \"multipart/form-data\",\n      style: {\n        margin: '10px 0px 20px'\n      },\n      onFinish: onSubmitForm,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }\n    }, __jsx(Input.TextArea, {\n      maxLength: 140,\n      placeholder: \"\\uC5B4\\uB5A4 \\uC2E0\\uAE30\\uD55C \\uC77C\\uC774 \\uC788\\uC5C8\\uB098\\uC694\",\n      value: text,\n      onChange: onChangeText,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }\n    }), __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }\n    }, __jsx(Button, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }\n    }, \"\\uC774\\uBBF8\\uC9C0 \\uC5C5\\uB85C\\uB4DC\"), __jsx(Button, {\n      type: \"primary\",\n      style: {\n        \"float\": 'right'\n      },\n      htmlType: \"submit\",\n      loading: isAddingPost,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }\n    }, \"\\uC9F9\\uC9F9\\uCA31\")), __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 13\n      }\n    }, imagePath.map(function (v, i) {\n      // 반복문\n      return __jsx(\"div\", {\n        key: v,\n        style: {\n          display: 'inline-block'\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 25\n        }\n      }, __jsx(\"img\", {\n        src: \"http://localhost:3000/ \".concat(v),\n        style: {\n          width: '200px'\n        },\n        alt: v,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 29\n        }\n      }), __jsx(\"div\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 29\n        }\n      }, __jsx(Button, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 33\n        }\n      }, \"\\uC81C\\uAC70\")));\n    })))\n  );\n};\n\n_s(PostForm, \"Q77Ph6J0I1nfJWOOR5/6I+lBpKI=\", false, function () {\n  return [useSelector, useSelector, useDispatch];\n});\n\n_c = PostForm;\nexport default PostForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostForm\");","map":{"version":3,"sources":["C:/react-nodebird/nodebird/front/components/PostForm.js"],"names":["React","useCallback","useState","useEffect","Form","Input","Button","useSelector","useDispatch","ADD_POST_REQUEST","_default","PostForm","state","post","imagePath","isAddingPost","postAdded","user","me","dispatch","text","setText","onChangeText","e","target","value","onSubmitForm","preventDefault","trim","alert","console","log","type","data","content","margin","map","v","i","display","width"],"mappings":"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","sourcesContent":["import React, { useCallback, useState, useEffect } from 'react';\r\nimport { Form, Input, Button } from 'antd';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { ADD_POST_REQUEST } from '../reducers/post';\r\nimport _default from 'antd/lib/time-picker';\r\n\r\n// const dummy = {\r\n//     isLoggedIn: true,\r\n//     imagePaths: [],\r\n//     mainPosts: [\r\n//         {\r\n//             User: {\r\n//                 id: 1,\r\n//                 nickname: '제로초',\r\n//             },\r\n//             content: '첫 번째 게시글',\r\n//             img: '',\r\n//         },\r\n//     ],\r\n// };\r\n\r\nconst PostForm = () => {\r\n    const { imagePath, isAddingPost, postAdded } = useSelector((state) => state.post);\r\n    const { me } = useSelector((state) => state.user);\r\n    const dispatch = useDispatch();\r\n    const [text, setText] = useState('');\r\n\r\n    useEffect(() => {\r\n        setText('');\r\n    }, [postAdded === true]); // 포스트 업로드 되면 text안 값 비워줌.\r\n\r\n    const onChangeText = useCallback((e) => {\r\n        setText(e.target.value);\r\n    }, []);\r\n\r\n    const onSubmitForm = useCallback(\r\n        (e) => {\r\n            e.preventDefault; // 페이지 안 넘어가게끔 해줌\r\n            if (!text || !text.trim()) {\r\n                // 공백 검사도 같이 해준다.\r\n                return alert('게시글을 작성하세요');\r\n            }\r\n            console.log('post 요청했어!!');\r\n            dispatch({\r\n                type: ADD_POST_REQUEST,\r\n                data: {\r\n                    content: text,\r\n                    user: me,\r\n                },\r\n            });\r\n        },\r\n        [text]\r\n    ); // userCallback은 기억력이 강력해서 [] 안에 넣어줘야 변동사항이 저장됨.\r\n\r\n    return (\r\n        // 이미지 업로드 해야하기 때문에 encType은 multipart임\r\n        // style넣을 때는 객체 형식으로 {{ 넣어야함 }}\r\n        <Form encType=\"multipart/form-data\" style={{ margin: '10px 0px 20px' }} onFinish={onSubmitForm}>\r\n            <Input.TextArea maxLength={140} placeholder=\"어떤 신기한 일이 있었나요\" value={text} onChange={onChangeText} />\r\n            <div>\r\n                <Button>이미지 업로드</Button>\r\n                <Button type=\"primary\" style={{ float: 'right' }} htmlType=\"submit\" loading={isAddingPost}>\r\n                    짹짹쨱\r\n                </Button>\r\n            </div>\r\n            <div>\r\n                {imagePath.map((v, i) => {\r\n                    // 반복문\r\n                    return (\r\n                        <div key={v} style={{ display: 'inline-block' }}>\r\n                            <img src={`http://localhost:3000/ ${v}`} style={{ width: '200px' }} alt={v} />\r\n                            <div>\r\n                                <Button>제거</Button>\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                })}\r\n            </div>\r\n        </Form>\r\n    );\r\n};\r\nexport default PostForm;\r\n"]},"metadata":{},"sourceType":"module"}
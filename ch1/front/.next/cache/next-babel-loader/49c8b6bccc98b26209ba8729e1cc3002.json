{"ast":null,"code":"import { applyMiddleware, createStore, compose } from 'redux';\nimport { createWrapper } from 'next-redux-wrapper';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport reducer from '../reducers';\n\nconst configureStore = context => {\n  console.log(context);\n  const middlewares = []; // redux의 기능을 추가 하고싶을 때 씀\n\n  const enhancer = false ? compose(applyMiddleware(...middlewares)) // 리덕스의 기능을 향상.\n  : composeWithDevTools(applyMiddleware(...middlewares));\n  const store = createStore(reducer, enhancer);\n  return store;\n};\n\nconst wrapper = createWrapper(configureStore, {\n  debug: true\n});\nexport default wrapper;","map":{"version":3,"sources":["C:/react-nodebird/ch1/front/store/configureStore.js"],"names":["applyMiddleware","createStore","compose","createWrapper","composeWithDevTools","reducer","configureStore","context","console","log","middlewares","enhancer","store","wrapper","debug"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,WAA1B,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,SAASC,aAAT,QAA8B,oBAA9B;AACA,SAASC,mBAAT,QAAoC,0BAApC;AAEA,OAAOC,OAAP,MAAoB,aAApB;;AAEA,MAAMC,cAAc,GAAIC,OAAD,IAAa;AAChCC,EAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACA,QAAMG,WAAW,GAAG,EAApB,CAFgC,CAER;;AACxB,QAAMC,QAAQ,GACV,QACMT,OAAO,CAACF,eAAe,CAAC,GAAGU,WAAJ,CAAhB,CADb,CAC+C;AAD/C,IAEMN,mBAAmB,CAACJ,eAAe,CAAC,GAAGU,WAAJ,CAAhB,CAH7B;AAIA,QAAME,KAAK,GAAGX,WAAW,CAACI,OAAD,EAAUM,QAAV,CAAzB;AACA,SAAOC,KAAP;AACH,CATD;;AAWA,MAAMC,OAAO,GAAGV,aAAa,CAACG,cAAD,EAAiB;AAAEQ,EAAAA,KAAK;AAAP,CAAjB,CAA7B;AAEA,eAAeD,OAAf","sourcesContent":["import { applyMiddleware, createStore, compose } from 'redux';\r\nimport { createWrapper } from 'next-redux-wrapper';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nimport reducer from '../reducers';\r\n\r\nconst configureStore = (context) => {\r\n    console.log(context);\r\n    const middlewares = []; // redux의 기능을 추가 하고싶을 때 씀\r\n    const enhancer =\r\n        process.env.NODE_ENV === 'production'\r\n            ? compose(applyMiddleware(...middlewares)) // 리덕스의 기능을 향상.\r\n            : composeWithDevTools(applyMiddleware(...middlewares));\r\n    const store = createStore(reducer, enhancer);\r\n    return store;\r\n};\r\n\r\nconst wrapper = createWrapper(configureStore, { debug: process.env.NODE_ENV === 'development' });\r\n\r\nexport default wrapper;\r\n"]},"metadata":{},"sourceType":"module"}
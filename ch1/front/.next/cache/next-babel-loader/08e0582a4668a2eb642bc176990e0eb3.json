{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(login),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogin),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(helloSaga),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(userSaga);\n\nimport { all, fork, takeLatest, call, put, take } from 'redux-saga/effects';\nimport { LOG_IN, LOG_IN_SUCCESS, LOG_IN_FAILURE } from '../reducers/user';\n\nfunction loginAPI() {// 서버에 요청을 보내는 동작\n}\n\nfunction login() {\n  return _regeneratorRuntime.wrap(function login$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(loginAPI);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            // 성공하면 이 부분 동작한다.\n            type: LOG_IN_SUCCESS\n          });\n\n        case 5:\n          _context.next = 12;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          // loginAPI 실패\n          console.error(_context.t0);\n          _context.next = 12;\n          return put({\n            type: LOG_IN_FAILURE\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction watchLogin() {\n  return _regeneratorRuntime.wrap(function watchLogin$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(LOG_IN, login);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction helloSaga() {\n  return _regeneratorRuntime.wrap(function helloSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          console.log('hello saga');\n          _context3.next = 3;\n          return take(HELLO_SATA);\n\n        case 3:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return all([fork(watchLogin), helloSaga()]);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}","map":{"version":3,"sources":["C:/react-nodebird/ch1/front/saga/user.js"],"names":["login","watchLogin","helloSaga","userSaga","all","fork","takeLatest","call","put","take","LOG_IN","LOG_IN_SUCCESS","LOG_IN_FAILURE","loginAPI","type","console","error","log","HELLO_SATA"],"mappings":";;oDAOUA,K;qDAkBAC,U;qDAIAC,S;qDAKeC,Q;;AAlCzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,IAAhC,EAAsCC,GAAtC,EAA2CC,IAA3C,QAAuD,oBAAvD;AACA,SAASC,MAAT,EAAiBC,cAAjB,EAAiCC,cAAjC,QAAuD,kBAAvD;;AAEA,SAASC,QAAT,GAAoB,CAChB;AACH;;AAED,SAAUb,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIQ,iBAAMO,IAAI,CAACM,QAAD,CAAV;;AAJR;AAAA;AAKQ,iBAAML,GAAG,CAAC;AACN;AACAM,YAAAA,IAAI,EAAEH;AAFA,WAAD,CAAT;;AALR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAUQ;AACAI,UAAAA,OAAO,CAACC,KAAR;AAXR;AAYQ,iBAAMR,GAAG,CAAC;AACNM,YAAAA,IAAI,EAAEF;AADA,WAAD,CAAT;;AAZR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAkBA,SAAUX,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMK,UAAU,CAACI,MAAD,EAASV,KAAT,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUE,SAAV;AAAA;AAAA;AAAA;AAAA;AACIa,UAAAA,OAAO,CAACE,GAAR,CAAY,YAAZ;AADJ;AAEI,iBAAMR,IAAI,CAACS,UAAD,CAAV;;AAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKA,eAAe,SAAUf,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMC,GAAG,CAAC,CAACC,IAAI,CAACJ,UAAD,CAAL,EAAmBC,SAAS,EAA5B,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, fork, takeLatest, call, put, take } from 'redux-saga/effects';\r\nimport { LOG_IN, LOG_IN_SUCCESS, LOG_IN_FAILURE } from '../reducers/user';\r\n\r\nfunction loginAPI() {\r\n    // 서버에 요청을 보내는 동작\r\n}\r\n\r\nfunction* login() {\r\n    // 제너레이터는 async await보다 할 수 있는것이 많다.\r\n    try {\r\n        // 로그인 함수가 동작하면 서버에 먼저 요청을 보내고\r\n        yield call(loginAPI);\r\n        yield put({\r\n            // 성공하면 이 부분 동작한다.\r\n            type: LOG_IN_SUCCESS,\r\n        });\r\n    } catch (e) {\r\n        // loginAPI 실패\r\n        console.error(e);\r\n        yield put({\r\n            type: LOG_IN_FAILURE,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLogin() {\r\n    yield takeLatest(LOG_IN, login); // 로그인 액선이 들어오면 login함수를 실행\r\n}\r\n\r\nfunction* helloSaga() {\r\n    console.log('hello saga');\r\n    yield take(HELLO_SATA);\r\n}\r\n\r\nexport default function* userSaga() {\r\n    yield all([fork(watchLogin), helloSaga()]); // 시작점\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\react-nodebird\\\\ch1\\\\front\\\\pages\\\\_app.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport Head from 'next/head';\nimport AppLayout from '../components/AppLayout';\nimport withRedux from 'next-redux-wrapper';\nimport PropTypes from 'prop-types';\nimport { createStore } from 'redux';\nimport reducer from '../reducers';\nimport { Provider } from 'react-redux'; // 모든 파일들이 부모 component로 사용한다.\n// app.js 는 모든 페이지에 공통적으로 적용 됨. 중앙 통제실도 redux를 연결 해줘야함 app.js가 공유하기 때문에\n// store을 넣어 줄게 없으므로 npm i next-redux-wrapper로 해준다.\n\nconst Nodebird = ({\n  Component,\n  store\n}) => {\n  // props로 Component를 받는다.\n  return (// store 는 리덕스 state임 자식 component는 중앙통제실 state를 다 받는 거임 최상위 부모이기 때문\n    __jsx(React.Fragment, null, __jsx(Provider, {\n      store: store,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 13\n      }\n    }, __jsx(Head, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 17\n      }\n    }, __jsx(\"title\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 21\n      }\n    }, \"Node bird\"), __jsx(\"link\", {\n      rel: \"stylesheet\",\n      href: \"https://cdnjs.cloudflare.com/ajax/libs/antd/3.16.2/antd.css\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 21\n      }\n    }), __jsx(\"script\", {\n      src: \"https://cdnjs.cloudflare.com/ajax/libs/antd/3.16.2/antd.js\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 21\n      }\n    })), __jsx(AppLayout, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 17\n      }\n    }, __jsx(Component, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 21\n      }\n    }))))\n  );\n}; // 부모로부터 올바른 자료형을 받았는지 확인\n\n\nNodebird.propTypes = {\n  Component: PropTypes.elementType.isRequired,\n  // 노드로 가능한 것 : 랜더링으로 할 수 있는 모든 것 tag 쓰는 애들 >> elementType\n  store: PropTypes.object\n}; // 고위 컴퍼넌트라고 부름 기존 컴퍼넌트의 기능을 확장해줌.\n\nexport default withRedux((initialState, options) => {\n  const store = createStore(reducer, initialState); // 리듀서들을 만들었는데(state들이 어떻게 동작하는지) 이 위의것 두개 합친게 store\n  // 여기에다가 store 커스터마이징\n\n  return store;\n})(Nodebird); // 노드버드에 store을 props로 넣어준다고 생각하면 됨\n// hot(NumberBaseBall); 실시간으로 업데이트 가능한 기능","map":{"version":3,"sources":["C:/react-nodebird/ch1/front/pages/_app.js"],"names":["React","Head","AppLayout","withRedux","PropTypes","createStore","reducer","Provider","Nodebird","Component","store","propTypes","elementType","isRequired","object","initialState","options"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,WAAT,QAA4B,OAA5B;AACA,OAAOC,OAAP,MAAoB,aAApB;AACA,SAASC,QAAT,QAAyB,aAAzB,C,CACA;AACA;AAEA;;AACA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAD,KAA0B;AACvC;AACA,SACI;AACA,gCACI,MAAC,QAAD;AAAU,MAAA,KAAK,EAAEA,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADJ,EAEI;AAAM,MAAA,GAAG,EAAC,YAAV;AAAuB,MAAA,IAAI,EAAC,6DAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,EAGI;AAAQ,MAAA,GAAG,EAAC,4DAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ,CADJ,EAMI,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CANJ,CADJ;AAFJ;AAeH,CAjBD,C,CAkBA;;;AACAF,QAAQ,CAACG,SAAT,GAAqB;AACjBF,EAAAA,SAAS,EAAEL,SAAS,CAACQ,WAAV,CAAsBC,UADhB;AAC4B;AAC7CH,EAAAA,KAAK,EAAEN,SAAS,CAACU;AAFA,CAArB,C,CAIA;;AACA,eAAeX,SAAS,CAAC,CAACY,YAAD,EAAeC,OAAf,KAA2B;AAChD,QAAMN,KAAK,GAAGL,WAAW,CAACC,OAAD,EAAUS,YAAV,CAAzB,CADgD,CAEhD;AACA;;AACA,SAAOL,KAAP;AACH,CALuB,CAAT,CAKZF,QALY,CAAf,C,CAMA;AAEA","sourcesContent":["import React from 'react';\r\nimport Head from 'next/head';\r\nimport AppLayout from '../components/AppLayout';\r\nimport withRedux from 'next-redux-wrapper';\r\nimport PropTypes from 'prop-types';\r\nimport { createStore } from 'redux';\r\nimport reducer from '../reducers';\r\nimport { Provider } from 'react-redux';\r\n// 모든 파일들이 부모 component로 사용한다.\r\n// app.js 는 모든 페이지에 공통적으로 적용 됨. 중앙 통제실도 redux를 연결 해줘야함 app.js가 공유하기 때문에\r\n\r\n// store을 넣어 줄게 없으므로 npm i next-redux-wrapper로 해준다.\r\nconst Nodebird = ({ Component, store }) => {\r\n    // props로 Component를 받는다.\r\n    return (\r\n        // store 는 리덕스 state임 자식 component는 중앙통제실 state를 다 받는 거임 최상위 부모이기 때문\r\n        <>\r\n            <Provider store={store}>\r\n                <Head>\r\n                    <title>Node bird</title>\r\n                    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/antd/3.16.2/antd.css\" />\r\n                    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/antd/3.16.2/antd.js\" />\r\n                </Head>\r\n                <AppLayout>\r\n                    <Component />\r\n                </AppLayout>\r\n            </Provider>\r\n        </>\r\n    );\r\n};\r\n// 부모로부터 올바른 자료형을 받았는지 확인\r\nNodebird.propTypes = {\r\n    Component: PropTypes.elementType.isRequired, // 노드로 가능한 것 : 랜더링으로 할 수 있는 모든 것 tag 쓰는 애들 >> elementType\r\n    store: PropTypes.object,\r\n};\r\n// 고위 컴퍼넌트라고 부름 기존 컴퍼넌트의 기능을 확장해줌.\r\nexport default withRedux((initialState, options) => {\r\n    const store = createStore(reducer, initialState);\r\n    // 리듀서들을 만들었는데(state들이 어떻게 동작하는지) 이 위의것 두개 합친게 store\r\n    // 여기에다가 store 커스터마이징\r\n    return store;\r\n})(Nodebird);\r\n// 노드버드에 store을 props로 넣어준다고 생각하면 됨\r\n\r\n// hot(NumberBaseBall); 실시간으로 업데이트 가능한 기능\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar dummyUser = {\n  nickname: '제로초',\n  Post: [],\n  Followings: [],\n  Followers: []\n}; // 리덕스는 동기화로 작용함. 비동기로 하기 위해선 사가라는 미들웨어를 넣어야함.\n// 원래는 서버 쪽에 data가 전달되고, 서버가 로그인 성공이라는 응답을 보내주고, 그걸 다시 받아 로그인 함.\n// 서버가 맞는 응답을 보내주는 과정이 필요함. 그래서 필요한 것이 미들웨어.\n\nexport var initialState = {\n  // 초기 값 , 리액트의 state라 보면 됨\n  isLoggedIn: false,\n  // 로그인 여부\n  isLoggingOut: false,\n  // 로그아웃 시도중\n  isLoggingIn: false,\n  // 로그인 시도중\n  loginErrorReason: '',\n  // 로그인 에러 사유\n  signedUp: false,\n  // 회원가입 여부\n  isSigningUp: false,\n  // 회원가입 시도중\n  signUpErrorReason: '',\n  // 회원가입 실패 사유\n  me: null,\n  followingList: [],\n  // 팔로잉 리스트\n  followerList: [],\n  // 팔로우 리스트\n  userInfo: null // 남의 정보\n\n}; // 로그인 동작할 때,\n// 서버에 요청을 보낸다 -> request -> 비동기로 LOG_IN_SUCCESS or LOG_IN_FAILURE 선택> LOG_IN 동작\n\nexport var LOG_IN_REQUEST = 'LOG_IN_REQUEST';\nexport var LOG_IN_SUCCESS = 'LOG_IN_SUCCESS'; // 액션의 이름\n\nexport var LOG_IN_FAILURE = 'LOG_IN_FAILURE'; // 액션의 이름\n\nexport var LOAD_USER_REQUEST = 'LOAD_USER_REQUEST';\nexport var LOAD_USER_SUCCESS = 'LOAD_USER_SUCCESS'; // 액션의 이름\n\nexport var LOAD_USER_FAILURE = 'LOAD_USER_FAILURE'; // 액션의 이름\n\nexport var SIGN_UP_REQUEST = 'SIGN_UP_REQUEST';\nexport var SIGN_UP_SUCCESS = 'SIGN_UP_SUCCESS';\nexport var SIGN_UP_FAILURE = 'SIGN_UP_FAILURE';\nexport var LOG_OUT_REUQEST = 'LOG_OUT_REQUEST';\nexport var LOG_OUT_SUCCESS = 'LOG_OUT_SUCCESS';\nexport var LOG_OUT_FAILURE = 'LOG_OUT_FAILURE'; // 비동기 요청 서버에 갔다 와야하는!\n\nexport var LOAD_FOLLOW_REQUEST = 'LOAD_FOLLOW_REQUEST';\nexport var LOAD_FOLLOW_SUCCESS = 'LOAD_FOLLOW_SUCCESS'; // 액션의 이름\n\nexport var LOAD_FOLLOW_FAILURE = 'LOAD_FOLLOW_FAILURE'; // 액션의 이름\n\nexport var UNFOLLOW_REQUEST = 'UNFOLLOW_REQUEST';\nexport var UNFOLLOW_SUCCESS = 'UNFOLLOW_SUCCESS'; // 액션의 이름\n\nexport var UNFOLLOW_FAILURE = 'UNFOLLOW_FAILURE'; // 액션의 이름\n\nexport var REMOVE_FOLLOWer_REQUEST = 'REMOVE_FOLLOWer_REQUEST';\nexport var REMOVE_FOLLOWer_SUCCESS = 'REMOVE_FOLLOWer_SUCCESS'; // 액션의 이름\n\nexport var REMOVE_FOLLOWer_FAILURE = 'REMOVE_FOLLOWer_FAILURE'; // 액션의 이름\n\nexport var ADD_POST_TO_ME = 'ADD_POST_ME'; // export const SIGN_UP_ID = 'SIGN_UP_ID';\n// export const SIGN_UP_NICK = 'SIGN_UP_NICK';\n// export const SIGN_UP_PASSWORD = 'SIGN_UP_PASSWORD';\n// 원래는 이렇게 해줘야함.\n// 아래는 set State라 보면됨. Action과 reducer로 분리됨.\n\nexport var signUpSuccess = {\n  type: SIGN_UP_SUCCESS\n};\nexport var signUp = function signUp(data) {\n  return {\n    type: SIGN_UP_REQUEST,\n    data: data\n  };\n}; // 바로 리턴\n\nexport var loginAction = {\n  type: LOG_IN_REQUEST,\n  data: data\n};\nexport var logoutAction = {\n  type: LOG_OUT_REQUEST,\n  data: data\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case LOG_IN_REQUEST:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          // 다음 state들 할 행동\n          isLoading: true\n        });\n      }\n\n    case LOG_IN_SUCCESS:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          isLoggedIn: true,\n          me: dummyUser,\n          isLoading: false\n        });\n      }\n\n    case LOG_IN_FAILURE:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case LOG_OUT_REQUEST:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          // 스프레드 문법: 새로운 객체나 배열을 생성하는 문법 매번 다 쓰고 있음\n          isLoggedIn: false,\n          me: null\n        });\n      }\n\n    case SIGN_UP_REQUEST:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          signUpData: action.data\n        });\n      }\n\n    default:\n      {\n        return _objectSpread({}, state);\n      }\n  }\n};\n\nexport default reducer; // setState((prevState)=>{ 옛날 스테이트와 같아졌는지 확인하기 때문에 새로 생성 해줘야함.\n//     return {\n//         field: { ...prevState.field},\n//     }\n// })\n// function* generator() {\n//     // 제너레이터 라고 *는 무한의 개념 제너레이터는 함수 실행을 중간에 멈출 수 있고 원할 때 재개 가능\n// }","map":{"version":3,"sources":["C:/react-nodebird/ch1/front/reducers/user.js"],"names":["dummyUser","nickname","Post","Followings","Followers","initialState","isLoggedIn","isLoggingOut","isLoggingIn","loginErrorReason","signedUp","isSigningUp","signUpErrorReason","me","followingList","followerList","userInfo","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOAD_USER_REQUEST","LOAD_USER_SUCCESS","LOAD_USER_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","LOG_OUT_REUQEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","LOAD_FOLLOW_REQUEST","LOAD_FOLLOW_SUCCESS","LOAD_FOLLOW_FAILURE","UNFOLLOW_REQUEST","UNFOLLOW_SUCCESS","UNFOLLOW_FAILURE","REMOVE_FOLLOWer_REQUEST","REMOVE_FOLLOWer_SUCCESS","REMOVE_FOLLOWer_FAILURE","ADD_POST_TO_ME","signUpSuccess","type","signUp","data","loginAction","logoutAction","LOG_OUT_REQUEST","reducer","state","action","isLoading","signUpData"],"mappings":"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","sourcesContent":["const dummyUser = {\r\n    nickname: '제로초',\r\n    Post: [],\r\n    Followings: [],\r\n    Followers: [],\r\n};\r\n\r\n// 리덕스는 동기화로 작용함. 비동기로 하기 위해선 사가라는 미들웨어를 넣어야함.\r\n// 원래는 서버 쪽에 data가 전달되고, 서버가 로그인 성공이라는 응답을 보내주고, 그걸 다시 받아 로그인 함.\r\n// 서버가 맞는 응답을 보내주는 과정이 필요함. 그래서 필요한 것이 미들웨어.\r\n\r\nexport const initialState = {\r\n    // 초기 값 , 리액트의 state라 보면 됨\r\n    isLoggedIn: false, // 로그인 여부\r\n    isLoggingOut: false, // 로그아웃 시도중\r\n    isLoggingIn: false, // 로그인 시도중\r\n    loginErrorReason: '', // 로그인 에러 사유\r\n    signedUp: false, // 회원가입 여부\r\n    isSigningUp: false, // 회원가입 시도중\r\n    signUpErrorReason: '', // 회원가입 실패 사유\r\n    me: null,\r\n    followingList: [], // 팔로잉 리스트\r\n    followerList: [], // 팔로우 리스트\r\n    userInfo: null, // 남의 정보\r\n};\r\n\r\n// 로그인 동작할 때,\r\n// 서버에 요청을 보낸다 -> request -> 비동기로 LOG_IN_SUCCESS or LOG_IN_FAILURE 선택> LOG_IN 동작\r\nexport const LOG_IN_REQUEST = 'LOG_IN_REQUEST';\r\nexport const LOG_IN_SUCCESS = 'LOG_IN_SUCCESS'; // 액션의 이름\r\nexport const LOG_IN_FAILURE = 'LOG_IN_FAILURE'; // 액션의 이름\r\n\r\nexport const LOAD_USER_REQUEST = 'LOAD_USER_REQUEST';\r\nexport const LOAD_USER_SUCCESS = 'LOAD_USER_SUCCESS'; // 액션의 이름\r\nexport const LOAD_USER_FAILURE = 'LOAD_USER_FAILURE'; // 액션의 이름\r\n\r\nexport const SIGN_UP_REQUEST = 'SIGN_UP_REQUEST';\r\nexport const SIGN_UP_SUCCESS = 'SIGN_UP_SUCCESS';\r\nexport const SIGN_UP_FAILURE = 'SIGN_UP_FAILURE';\r\n\r\nexport const LOG_OUT_REUQEST = 'LOG_OUT_REQUEST';\r\nexport const LOG_OUT_SUCCESS = 'LOG_OUT_SUCCESS';\r\nexport const LOG_OUT_FAILURE = 'LOG_OUT_FAILURE'; // 비동기 요청 서버에 갔다 와야하는!\r\n\r\nexport const LOAD_FOLLOW_REQUEST = 'LOAD_FOLLOW_REQUEST';\r\nexport const LOAD_FOLLOW_SUCCESS = 'LOAD_FOLLOW_SUCCESS'; // 액션의 이름\r\nexport const LOAD_FOLLOW_FAILURE = 'LOAD_FOLLOW_FAILURE'; // 액션의 이름\r\n\r\nexport const UNFOLLOW_REQUEST = 'UNFOLLOW_REQUEST';\r\nexport const UNFOLLOW_SUCCESS = 'UNFOLLOW_SUCCESS'; // 액션의 이름\r\nexport const UNFOLLOW_FAILURE = 'UNFOLLOW_FAILURE'; // 액션의 이름\r\n\r\nexport const REMOVE_FOLLOWer_REQUEST = 'REMOVE_FOLLOWer_REQUEST';\r\nexport const REMOVE_FOLLOWer_SUCCESS = 'REMOVE_FOLLOWer_SUCCESS'; // 액션의 이름\r\nexport const REMOVE_FOLLOWer_FAILURE = 'REMOVE_FOLLOWer_FAILURE'; // 액션의 이름\r\n\r\nexport const ADD_POST_TO_ME = 'ADD_POST_ME';\r\n\r\n// export const SIGN_UP_ID = 'SIGN_UP_ID';\r\n// export const SIGN_UP_NICK = 'SIGN_UP_NICK';\r\n// export const SIGN_UP_PASSWORD = 'SIGN_UP_PASSWORD';\r\n// 원래는 이렇게 해줘야함.\r\n\r\n// 아래는 set State라 보면됨. Action과 reducer로 분리됨.\r\nexport const signUpSuccess = {\r\n    type: SIGN_UP_SUCCESS,\r\n};\r\n\r\nexport const signUp = (data) => ({\r\n    type: SIGN_UP_REQUEST,\r\n    data: data,\r\n}); // 바로 리턴\r\n\r\nexport const loginAction = {\r\n    type: LOG_IN_REQUEST,\r\n    data,\r\n};\r\n\r\nexport const logoutAction = {\r\n    type: LOG_OUT_REQUEST,\r\n    data,\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case LOG_IN_REQUEST: {\r\n            return {\r\n                ...state, // 다음 state들 할 행동\r\n                isLoading: true,\r\n            };\r\n        }\r\n        case LOG_IN_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                isLoggedIn: true,\r\n                me: dummyUser,\r\n                isLoading: false,\r\n            };\r\n        }\r\n        case LOG_IN_FAILURE: {\r\n            return {\r\n                ...state,\r\n            };\r\n        }\r\n        case LOG_OUT_REQUEST: {\r\n            return {\r\n                ...state, // 스프레드 문법: 새로운 객체나 배열을 생성하는 문법 매번 다 쓰고 있음\r\n                isLoggedIn: false,\r\n                me: null,\r\n            };\r\n        }\r\n        case SIGN_UP_REQUEST: {\r\n            return {\r\n                ...state,\r\n                signUpData: action.data,\r\n            };\r\n        }\r\n        default: {\r\n            return {\r\n                ...state,\r\n            };\r\n        }\r\n    }\r\n};\r\n\r\nexport default reducer;\r\n// setState((prevState)=>{ 옛날 스테이트와 같아졌는지 확인하기 때문에 새로 생성 해줘야함.\r\n//     return {\r\n//         field: { ...prevState.field},\r\n//     }\r\n// })\r\n\r\n// function* generator() {\r\n//     // 제너레이터 라고 *는 무한의 개념 제너레이터는 함수 실행을 중간에 멈출 수 있고 원할 때 재개 가능\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}
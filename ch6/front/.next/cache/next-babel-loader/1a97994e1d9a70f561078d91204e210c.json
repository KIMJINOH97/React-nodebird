{"ast":null,"code":"import { all, fork, takeLatest, takeEvery, call, put, take, delay } from 'redux-saga/effects';\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE } from '../reducers/user';\nimport axios from 'axios';\n\nfunction loginAPI() {\n  // 서버에 요청을 보내는 동작\n  return axios.post('/login');\n}\n\nfunction* login() {\n  // 제너레이터는 async await보다 할 수 있는것이 많다.\n  // try, catch 는 실패할 수 있는 코드에서 보호하기 위해 사용.\n  try {\n    // 로그인 함수가 동작하면 서버에 먼저 요청을 보내고\n    // yield fork(logger); // logger는 내 기록을 로깅하는 함수, 10초걸림.\n    // 만약 call로 하면 10초 기다렸다가 밑의 함수 실행. 이런 경우는 fork씀.\n    // yield call(loginAPI); // fork를 하면 서버 요청을 보내고 신경 안쓴 뒤 put을 한다.\n    // fork는 문제가 생긴다. call일 때는 loginAPI가 오류나면 error로 넘어가 오류처리.\n    yield delay(1000);\n    yield put({\n      // 성공하면 이 부분 동작한다.\n      type: LOG_IN_SUCCESS\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.log('adsfj');\n    console.error(e);\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeEvery(LOG_IN_REQUEST, login());\n} // while(true) = takeEvery와 비슷하게 작용.\n// takeLatest 와 takeEvery는 동작은 비슷함. 이전 요청 중 끝나지 않은게 있다면 이전 요청 취소해줌.\n// 그러나 delay가 들어가면 다름. HELLOSAGA 3번하면 1번만 뜸. 가장 최신의 것만 받았다 친다?임. 동시에 여러번 하면 그 중 마지막만 받는다.\n\n\nfunction* watchHello() {\n  yield takeLatest(HELLO_SAGA, function* () {\n    yield delay(1000);\n    yield put({\n      type: 'BYE_SAGA'\n    });\n  });\n}\n\nfunction signUpAPI() {\n  // 서버요청\n  return axios.post('/login');\n}\n\nfunction* signUp() {\n  try {\n    // yield call(signUpAPI); // 서버요청 보냄\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: SIGN_UP_FAILURE\n    });\n  }\n}\n\nfunction* watchSignUp() {\n  yield takeEvery(SIGN_UP_REQUEST, signUp);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchSignUp)]); // 시작점\n  // all은 여러 이펙트를 동시에 실행 할 수 있게끔함.\n  // fork, call 비슷함. 공통점: 기본적으로 함수를 실행함\n  // call은 동기호출, fork는 비동기 호출임. fork는 비동기라 동시 실행 가능.\n} // function* watchLogin() {\n//     console.log('before log_in');\n//     while (true) {\n//         yield take(LOG_IN); // take(LOG_IN, login)로그인 액선이 들어오면 login함수를 실행\n//         yield delay(2000); // 2초뒤에 success가 실행\n//         yield put({\n//             type: LOG_IN_SUCCESS, // saga의 dispatch와 같다보면됨.\n//         });\n//         console.log('sdjf');\n//     }\n// }\n// function* watchHello() {\n//     console.log('before saga');\n//     while (true) {\n//         yield take(HELLO_SAGA);\n//         console.log('hello saga');\n//         console.log('hello saga');\n//         console.log('hello saga');\n//         // 리덕스의 동작을 방해하진 않는다.\n//     } // take가 HELLO_SAGA를 기다리겠다는 거임. next가 오면 실행하겠다는 거임.\n//     // take함수 안에 next가 있음. 알아서 해줌. 언제 재게가 되냐면 HELLO_SAGA라는 action이 올 때까지\n//     // 즉 HELLO_SAGA action이 들어오면 중단 품.\n//     // 비동기 요청해도 되고, 타이머 넣어도 됨.\n// }","map":{"version":3,"sources":["C:/react-nodebird/ch1/front/saga/user.js"],"names":["all","fork","takeLatest","takeEvery","call","put","take","delay","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","axios","loginAPI","post","login","type","e","console","log","error","watchLogin","watchHello","HELLO_SAGA","signUpAPI","signUp","watchSignUp","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,SAAhC,EAA2CC,IAA3C,EAAiDC,GAAjD,EAAsDC,IAAtD,EAA4DC,KAA5D,QAAyE,oBAAzE;AACA,SAASC,cAAT,EAAyBC,cAAzB,EAAyCC,cAAzC,EAAyDC,eAAzD,EAA0EC,eAA1E,EAA2FC,eAA3F,QAAkH,kBAAlH;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,QAAT,GAAoB;AAChB;AACA,SAAOD,KAAK,CAACE,IAAN,CAAW,QAAX,CAAP;AACH;;AAED,UAAUC,KAAV,GAAkB;AACd;AACA;AACA,MAAI;AACA;AACA;AACA;AACA;AACA;AACA,UAAMV,KAAK,CAAC,IAAD,CAAX;AACA,UAAMF,GAAG,CAAC;AACN;AACAa,MAAAA,IAAI,EAAET;AAFA,KAAD,CAAT;AAIH,GAXD,CAWE,OAAOU,CAAP,EAAU;AACR;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACAD,IAAAA,OAAO,CAACE,KAAR,CAAcH,CAAd;AACA,UAAMd,GAAG,CAAC;AACNa,MAAAA,IAAI,EAAER;AADA,KAAD,CAAT;AAGH;AACJ;;AAED,UAAUa,UAAV,GAAuB;AACnB,QAAMpB,SAAS,CAACK,cAAD,EAAiBS,KAAK,EAAtB,CAAf;AACH,C,CAED;AACA;AACA;;;AACA,UAAUO,UAAV,GAAuB;AACnB,QAAMtB,UAAU,CAACuB,UAAD,EAAa,aAAa;AACtC,UAAMlB,KAAK,CAAC,IAAD,CAAX;AACA,UAAMF,GAAG,CAAC;AACNa,MAAAA,IAAI,EAAE;AADA,KAAD,CAAT;AAGH,GALe,CAAhB;AAMH;;AAED,SAASQ,SAAT,GAAqB;AACjB;AACA,SAAOZ,KAAK,CAACE,IAAN,CAAW,QAAX,CAAP;AACH;;AAED,UAAUW,MAAV,GAAmB;AACf,MAAI;AACA;AACA,UAAMtB,GAAG,CAAC;AACNa,MAAAA,IAAI,EAAEN;AADA,KAAD,CAAT;AAGH,GALD,CAKE,OAAOO,CAAP,EAAU;AACRC,IAAAA,OAAO,CAACE,KAAR,CAAcH,CAAd;AACA,UAAMd,GAAG,CAAC;AACNa,MAAAA,IAAI,EAAEL;AADA,KAAD,CAAT;AAGH;AACJ;;AAED,UAAUe,WAAV,GAAwB;AACpB,QAAMzB,SAAS,CAACQ,eAAD,EAAkBgB,MAAlB,CAAf;AACH;;AAED,eAAe,UAAUE,QAAV,GAAqB;AAChC,QAAM7B,GAAG,CAAC,CAACC,IAAI,CAACsB,UAAD,CAAL,EAAmBtB,IAAI,CAAC2B,WAAD,CAAvB,CAAD,CAAT,CADgC,CACkB;AAClD;AACA;AACA;AACH,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { all, fork, takeLatest, takeEvery, call, put, take, delay } from 'redux-saga/effects';\r\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE } from '../reducers/user';\r\nimport axios from 'axios';\r\n\r\nfunction loginAPI() {\r\n    // 서버에 요청을 보내는 동작\r\n    return axios.post('/login');\r\n}\r\n\r\nfunction* login() {\r\n    // 제너레이터는 async await보다 할 수 있는것이 많다.\r\n    // try, catch 는 실패할 수 있는 코드에서 보호하기 위해 사용.\r\n    try {\r\n        // 로그인 함수가 동작하면 서버에 먼저 요청을 보내고\r\n        // yield fork(logger); // logger는 내 기록을 로깅하는 함수, 10초걸림.\r\n        // 만약 call로 하면 10초 기다렸다가 밑의 함수 실행. 이런 경우는 fork씀.\r\n        // yield call(loginAPI); // fork를 하면 서버 요청을 보내고 신경 안쓴 뒤 put을 한다.\r\n        // fork는 문제가 생긴다. call일 때는 loginAPI가 오류나면 error로 넘어가 오류처리.\r\n        yield delay(1000);\r\n        yield put({\r\n            // 성공하면 이 부분 동작한다.\r\n            type: LOG_IN_SUCCESS,\r\n        });\r\n    } catch (e) {\r\n        // loginAPI 실패\r\n        console.log('adsfj');\r\n        console.error(e);\r\n        yield put({\r\n            type: LOG_IN_FAILURE,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLogin() {\r\n    yield takeEvery(LOG_IN_REQUEST, login());\r\n}\r\n\r\n// while(true) = takeEvery와 비슷하게 작용.\r\n// takeLatest 와 takeEvery는 동작은 비슷함. 이전 요청 중 끝나지 않은게 있다면 이전 요청 취소해줌.\r\n// 그러나 delay가 들어가면 다름. HELLOSAGA 3번하면 1번만 뜸. 가장 최신의 것만 받았다 친다?임. 동시에 여러번 하면 그 중 마지막만 받는다.\r\nfunction* watchHello() {\r\n    yield takeLatest(HELLO_SAGA, function* () {\r\n        yield delay(1000);\r\n        yield put({\r\n            type: 'BYE_SAGA',\r\n        });\r\n    });\r\n}\r\n\r\nfunction signUpAPI() {\r\n    // 서버요청\r\n    return axios.post('/login');\r\n}\r\n\r\nfunction* signUp() {\r\n    try {\r\n        // yield call(signUpAPI); // 서버요청 보냄\r\n        yield put({\r\n            type: SIGN_UP_SUCCESS,\r\n        });\r\n    } catch (e) {\r\n        console.error(e);\r\n        yield put({\r\n            type: SIGN_UP_FAILURE,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchSignUp() {\r\n    yield takeEvery(SIGN_UP_REQUEST, signUp);\r\n}\r\n\r\nexport default function* userSaga() {\r\n    yield all([fork(watchLogin), fork(watchSignUp)]); // 시작점\r\n    // all은 여러 이펙트를 동시에 실행 할 수 있게끔함.\r\n    // fork, call 비슷함. 공통점: 기본적으로 함수를 실행함\r\n    // call은 동기호출, fork는 비동기 호출임. fork는 비동기라 동시 실행 가능.\r\n}\r\n\r\n// function* watchLogin() {\r\n//     console.log('before log_in');\r\n//     while (true) {\r\n//         yield take(LOG_IN); // take(LOG_IN, login)로그인 액선이 들어오면 login함수를 실행\r\n//         yield delay(2000); // 2초뒤에 success가 실행\r\n//         yield put({\r\n//             type: LOG_IN_SUCCESS, // saga의 dispatch와 같다보면됨.\r\n//         });\r\n//         console.log('sdjf');\r\n//     }\r\n// }\r\n\r\n// function* watchHello() {\r\n//     console.log('before saga');\r\n//     while (true) {\r\n//         yield take(HELLO_SAGA);\r\n//         console.log('hello saga');\r\n//         console.log('hello saga');\r\n//         console.log('hello saga');\r\n//         // 리덕스의 동작을 방해하진 않는다.\r\n//     } // take가 HELLO_SAGA를 기다리겠다는 거임. next가 오면 실행하겠다는 거임.\r\n//     // take함수 안에 next가 있음. 알아서 해줌. 언제 재게가 되냐면 HELLO_SAGA라는 action이 올 때까지\r\n//     // 즉 HELLO_SAGA action이 들어오면 중단 품.\r\n//     // 비동기 요청해도 되고, 타이머 넣어도 됨.\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}
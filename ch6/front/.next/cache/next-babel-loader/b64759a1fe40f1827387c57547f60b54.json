{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(login),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogin),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watchHello),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchSignUp),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(userSaga);\n\nimport { all, fork, takeLatest, takeEvery, call, put, take, delay } from 'redux-saga/effects';\nimport { LOG_IN, LOG_IN_SUCCESS, LOG_IN_FAILURE } from '../reducers/user';\nvar HELLO_SAGA = 'HELLO_SAGA';\n\nfunction loginAPI() {// 서버에 요청을 보내는 동작\n}\n\nfunction login() {\n  return _regeneratorRuntime.wrap(function login$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(loginAPI);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            // 성공하면 이 부분 동작한다.\n            type: LOG_IN_SUCCESS\n          });\n\n        case 5:\n          _context.next = 12;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          // loginAPI 실패\n          console.error(_context.t0);\n          _context.next = 12;\n          return put({\n            type: LOG_IN_FAILURE\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction watchLogin() {\n  return _regeneratorRuntime.wrap(function watchLogin$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          console.log('before log_in');\n\n        case 1:\n          if (!true) {\n            _context2.next = 11;\n            break;\n          }\n\n          _context2.next = 4;\n          return take(LOG_IN);\n\n        case 4:\n          _context2.next = 6;\n          return delay(2000);\n\n        case 6:\n          _context2.next = 8;\n          return put({\n            type: LOG_IN_SUCCESS // saga의 dispatch와 같다보면됨.\n\n          });\n\n        case 8:\n          console.log('sdjf');\n          _context2.next = 1;\n          break;\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction watchHello() {\n  return _regeneratorRuntime.wrap(function watchHello$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeEvery(HELLO_SAGA, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n            return _regeneratorRuntime.wrap(function _callee$(_context3) {\n              while (1) {\n                switch (_context3.prev = _context3.next) {\n                  case 0:\n                    _context3.next = 2;\n                    return put({\n                      type: 'BYE_SAGA'\n                    });\n\n                  case 2:\n                  case \"end\":\n                    return _context3.stop();\n                }\n              }\n            }, _callee);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked3);\n} // function* watchHello() {\n//     console.log('before saga');\n//     while (true) {\n//         yield take(HELLO_SAGA);\n//         console.log('hello saga');\n//         console.log('hello saga');\n//         console.log('hello saga');\n//         // 리덕스의 동작을 방해하진 않는다.\n//     } // take가 HELLO_SAGA를 기다리겠다는 거임. next가 오면 실행하겠다는 거임.\n//     // take함수 안에 next가 있음. 알아서 해줌. 언제 재게가 되냐면 HELLO_SAGA라는 action이 올 때까지\n//     // 즉 HELLO_SAGA action이 들어오면 중단 품.\n//     // 비동기 요청해도 되고, 타이머 넣어도 됨.\n// }\n\n\nfunction watchSignUp() {\n  return _regeneratorRuntime.wrap(function watchSignUp$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return all([watchLogin(), watchHello()]);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["C:/react-nodebird/ch1/front/saga/user.js"],"names":["login","watchLogin","watchHello","watchSignUp","userSaga","all","fork","takeLatest","takeEvery","call","put","take","delay","LOG_IN","LOG_IN_SUCCESS","LOG_IN_FAILURE","HELLO_SAGA","loginAPI","type","console","error","log"],"mappings":";;oDAQUA,K;qDAkBAC,U;qDAYAC,U;qDAsBAC,W;qDAEeC,Q;;AA9DzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,SAAhC,EAA2CC,IAA3C,EAAiDC,GAAjD,EAAsDC,IAAtD,EAA4DC,KAA5D,QAAyE,oBAAzE;AACA,SAASC,MAAT,EAAiBC,cAAjB,EAAiCC,cAAjC,QAAuD,kBAAvD;AAEA,IAAMC,UAAU,GAAG,YAAnB;;AACA,SAASC,QAAT,GAAoB,CAChB;AACH;;AAED,SAAUjB,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIQ,iBAAMS,IAAI,CAACQ,QAAD,CAAV;;AAJR;AAAA;AAKQ,iBAAMP,GAAG,CAAC;AACN;AACAQ,YAAAA,IAAI,EAAEJ;AAFA,WAAD,CAAT;;AALR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAUQ;AACAK,UAAAA,OAAO,CAACC,KAAR;AAXR;AAYQ,iBAAMV,GAAG,CAAC;AACNQ,YAAAA,IAAI,EAAEH;AADA,WAAD,CAAT;;AAZR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAkBA,SAAUd,UAAV;AAAA;AAAA;AAAA;AAAA;AACIkB,UAAAA,OAAO,CAACE,GAAR,CAAY,eAAZ;;AADJ;AAAA,eAEW,IAFX;AAAA;AAAA;AAAA;;AAAA;AAGQ,iBAAMV,IAAI,CAACE,MAAD,CAAV;;AAHR;AAAA;AAIQ,iBAAMD,KAAK,CAAC,IAAD,CAAX;;AAJR;AAAA;AAKQ,iBAAMF,GAAG,CAAC;AACNQ,YAAAA,IAAI,EAAEJ,cADA,CACgB;;AADhB,WAAD,CAAT;;AALR;AAQQK,UAAAA,OAAO,CAACE,GAAR,CAAY,MAAZ;AARR;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAYA,SAAUnB,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMM,SAAS,CAACQ,UAAD,wCAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AACxB,2BAAMN,GAAG,CAAC;AACNQ,sBAAAA,IAAI,EAAE;AADA,qBAAD,CAAT;;AADwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAb,EAAf;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAAUf,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA,eAAe,SAAUC,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMC,GAAG,CAAC,CAACJ,UAAU,EAAX,EAAeC,UAAU,EAAzB,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, fork, takeLatest, takeEvery, call, put, take, delay } from 'redux-saga/effects';\r\nimport { LOG_IN, LOG_IN_SUCCESS, LOG_IN_FAILURE } from '../reducers/user';\r\n\r\nconst HELLO_SAGA = 'HELLO_SAGA';\r\nfunction loginAPI() {\r\n    // 서버에 요청을 보내는 동작\r\n}\r\n\r\nfunction* login() {\r\n    // 제너레이터는 async await보다 할 수 있는것이 많다.\r\n    try {\r\n        // 로그인 함수가 동작하면 서버에 먼저 요청을 보내고\r\n        yield call(loginAPI);\r\n        yield put({\r\n            // 성공하면 이 부분 동작한다.\r\n            type: LOG_IN_SUCCESS,\r\n        });\r\n    } catch (e) {\r\n        // loginAPI 실패\r\n        console.error(e);\r\n        yield put({\r\n            type: LOG_IN_FAILURE,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLogin() {\r\n    console.log('before log_in');\r\n    while (true) {\r\n        yield take(LOG_IN); // take(LOG_IN, login)로그인 액선이 들어오면 login함수를 실행\r\n        yield delay(2000); // 2초뒤에 success가 실행\r\n        yield put({\r\n            type: LOG_IN_SUCCESS, // saga의 dispatch와 같다보면됨.\r\n        });\r\n        console.log('sdjf');\r\n    }\r\n}\r\n\r\nfunction* watchHello() {\r\n    yield takeEvery(HELLO_SAGA, function* () {\r\n        yield put({\r\n            type: 'BYE_SAGA',\r\n        });\r\n    });\r\n}\r\n\r\n// function* watchHello() {\r\n//     console.log('before saga');\r\n//     while (true) {\r\n//         yield take(HELLO_SAGA);\r\n//         console.log('hello saga');\r\n//         console.log('hello saga');\r\n//         console.log('hello saga');\r\n//         // 리덕스의 동작을 방해하진 않는다.\r\n//     } // take가 HELLO_SAGA를 기다리겠다는 거임. next가 오면 실행하겠다는 거임.\r\n//     // take함수 안에 next가 있음. 알아서 해줌. 언제 재게가 되냐면 HELLO_SAGA라는 action이 올 때까지\r\n//     // 즉 HELLO_SAGA action이 들어오면 중단 품.\r\n//     // 비동기 요청해도 되고, 타이머 넣어도 됨.\r\n// }\r\n\r\nfunction* watchSignUp() {}\r\n\r\nexport default function* userSaga() {\r\n    yield all([watchLogin(), watchHello()]); // 시작점\r\n    // all은 여러 이펙트를 동시에 실행 할 수 있게끔함.\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
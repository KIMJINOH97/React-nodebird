{"ast":null,"code":"import { all, fork, takeLatest, takeEvery, call, put, take, delay } from 'redux-saga/effects';\nimport { LOG_IN, LOG_IN_SUCCESS, LOG_IN_FAILURE } from '../reducers/user';\nconst HELLO_SAGA = 'HELLO_SAGA';\n\nfunction loginAPI() {// 서버에 요청을 보내는 동작\n}\n\nfunction* login() {\n  // 제너레이터는 async await보다 할 수 있는것이 많다.\n  try {\n    // 로그인 함수가 동작하면 서버에 먼저 요청을 보내고\n    yield call(loginAPI);\n    yield put({\n      // 성공하면 이 부분 동작한다.\n      type: LOG_IN_SUCCESS\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n  }\n}\n\nfunction* watchLogin() {\n  console.log('before log_in');\n\n  while (true) {\n    yield take(LOG_IN); // take(LOG_IN, login)로그인 액선이 들어오면 login함수를 실행\n\n    yield delay(2000); // 2초뒤에 success가 실행\n\n    yield put({\n      type: LOG_IN_SUCCESS // saga의 dispatch와 같다보면됨.\n\n    });\n    console.log('sdjf');\n  }\n}\n\nfunction* watchSignUp() {}\n\nexport default function* userSaga() {\n  yield all([watchLogin(), watchHello()]); // 시작점\n  // all은 여러 이펙트를 동시에 실행 할 수 있게끔함.\n} // while(true) = take(every)와 비슷하게 작용.\n// takeLatest 와 takeEvery는 동작은 비슷함. 이전 요청 중 끝나지 않은게 있다면 이전 요청 취소해줌.\n// 그러나 delay가 들어가면 다름. HELLOSAGA 3번하면 1번만 뜸. 가장 최신의 것만 받았다 친다?임. 동시에 여러번 하면 그 중 마지막만 받는다.\n// function* watchHello() {\n//     yield takeLatest(HELLO_SAGA, function* () {\n//         yield delay(1000);\n//         yield put({\n//             type: 'BYE_SAGA',\n//         });\n//     });\n// }\n// function* watchHello() {\n//     console.log('before saga');\n//     while (true) {\n//         yield take(HELLO_SAGA);\n//         console.log('hello saga');\n//         console.log('hello saga');\n//         console.log('hello saga');\n//         // 리덕스의 동작을 방해하진 않는다.\n//     } // take가 HELLO_SAGA를 기다리겠다는 거임. next가 오면 실행하겠다는 거임.\n//     // take함수 안에 next가 있음. 알아서 해줌. 언제 재게가 되냐면 HELLO_SAGA라는 action이 올 때까지\n//     // 즉 HELLO_SAGA action이 들어오면 중단 품.\n//     // 비동기 요청해도 되고, 타이머 넣어도 됨.\n// }","map":{"version":3,"sources":["C:/react-nodebird/ch1/front/saga/user.js"],"names":["all","fork","takeLatest","takeEvery","call","put","take","delay","LOG_IN","LOG_IN_SUCCESS","LOG_IN_FAILURE","HELLO_SAGA","loginAPI","login","type","e","console","error","watchLogin","log","watchSignUp","userSaga","watchHello"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,SAAhC,EAA2CC,IAA3C,EAAiDC,GAAjD,EAAsDC,IAAtD,EAA4DC,KAA5D,QAAyE,oBAAzE;AACA,SAASC,MAAT,EAAiBC,cAAjB,EAAiCC,cAAjC,QAAuD,kBAAvD;AAEA,MAAMC,UAAU,GAAG,YAAnB;;AACA,SAASC,QAAT,GAAoB,CAChB;AACH;;AAED,UAAUC,KAAV,GAAkB;AACd;AACA,MAAI;AACA;AACA,UAAMT,IAAI,CAACQ,QAAD,CAAV;AACA,UAAMP,GAAG,CAAC;AACN;AACAS,MAAAA,IAAI,EAAEL;AAFA,KAAD,CAAT;AAIH,GAPD,CAOE,OAAOM,CAAP,EAAU;AACR;AACAC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA,UAAMV,GAAG,CAAC;AACNS,MAAAA,IAAI,EAAEJ;AADA,KAAD,CAAT;AAGH;AACJ;;AAED,UAAUQ,UAAV,GAAuB;AACnBF,EAAAA,OAAO,CAACG,GAAR,CAAY,eAAZ;;AACA,SAAO,IAAP,EAAa;AACT,UAAMb,IAAI,CAACE,MAAD,CAAV,CADS,CACW;;AACpB,UAAMD,KAAK,CAAC,IAAD,CAAX,CAFS,CAEU;;AACnB,UAAMF,GAAG,CAAC;AACNS,MAAAA,IAAI,EAAEL,cADA,CACgB;;AADhB,KAAD,CAAT;AAGAO,IAAAA,OAAO,CAACG,GAAR,CAAY,MAAZ;AACH;AACJ;;AAED,UAAUC,WAAV,GAAwB,CAAE;;AAE1B,eAAe,UAAUC,QAAV,GAAqB;AAChC,QAAMrB,GAAG,CAAC,CAACkB,UAAU,EAAX,EAAeI,UAAU,EAAzB,CAAD,CAAT,CADgC,CACS;AACzC;AACH,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { all, fork, takeLatest, takeEvery, call, put, take, delay } from 'redux-saga/effects';\r\nimport { LOG_IN, LOG_IN_SUCCESS, LOG_IN_FAILURE } from '../reducers/user';\r\n\r\nconst HELLO_SAGA = 'HELLO_SAGA';\r\nfunction loginAPI() {\r\n    // 서버에 요청을 보내는 동작\r\n}\r\n\r\nfunction* login() {\r\n    // 제너레이터는 async await보다 할 수 있는것이 많다.\r\n    try {\r\n        // 로그인 함수가 동작하면 서버에 먼저 요청을 보내고\r\n        yield call(loginAPI);\r\n        yield put({\r\n            // 성공하면 이 부분 동작한다.\r\n            type: LOG_IN_SUCCESS,\r\n        });\r\n    } catch (e) {\r\n        // loginAPI 실패\r\n        console.error(e);\r\n        yield put({\r\n            type: LOG_IN_FAILURE,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLogin() {\r\n    console.log('before log_in');\r\n    while (true) {\r\n        yield take(LOG_IN); // take(LOG_IN, login)로그인 액선이 들어오면 login함수를 실행\r\n        yield delay(2000); // 2초뒤에 success가 실행\r\n        yield put({\r\n            type: LOG_IN_SUCCESS, // saga의 dispatch와 같다보면됨.\r\n        });\r\n        console.log('sdjf');\r\n    }\r\n}\r\n\r\nfunction* watchSignUp() {}\r\n\r\nexport default function* userSaga() {\r\n    yield all([watchLogin(), watchHello()]); // 시작점\r\n    // all은 여러 이펙트를 동시에 실행 할 수 있게끔함.\r\n}\r\n\r\n// while(true) = take(every)와 비슷하게 작용.\r\n// takeLatest 와 takeEvery는 동작은 비슷함. 이전 요청 중 끝나지 않은게 있다면 이전 요청 취소해줌.\r\n// 그러나 delay가 들어가면 다름. HELLOSAGA 3번하면 1번만 뜸. 가장 최신의 것만 받았다 친다?임. 동시에 여러번 하면 그 중 마지막만 받는다.\r\n// function* watchHello() {\r\n//     yield takeLatest(HELLO_SAGA, function* () {\r\n//         yield delay(1000);\r\n//         yield put({\r\n//             type: 'BYE_SAGA',\r\n//         });\r\n//     });\r\n// }\r\n\r\n// function* watchHello() {\r\n//     console.log('before saga');\r\n//     while (true) {\r\n//         yield take(HELLO_SAGA);\r\n//         console.log('hello saga');\r\n//         console.log('hello saga');\r\n//         console.log('hello saga');\r\n//         // 리덕스의 동작을 방해하진 않는다.\r\n//     } // take가 HELLO_SAGA를 기다리겠다는 거임. next가 오면 실행하겠다는 거임.\r\n//     // take함수 안에 next가 있음. 알아서 해줌. 언제 재게가 되냐면 HELLO_SAGA라는 action이 올 때까지\r\n//     // 즉 HELLO_SAGA action이 들어오면 중단 품.\r\n//     // 비동기 요청해도 되고, 타이머 넣어도 됨.\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}